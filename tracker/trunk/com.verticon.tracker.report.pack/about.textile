h1=. Tracker Premises Report Pack 

com.verticon.tracker.premises.reports Version 0.1.0

{toc:style=disc|minLevel=2|maxLevel=3}


h2(. Introduction

The Tracker Report Pack is a suite of BIRT Reports and Resources that reference premises documents as data sources. Tracker Report Pack reports do not contain hard coded paths to premises documents, so they need no modification to target different premises documents. 

On installation, Tracker Report Packs will be detected and its reports and resources will deployed to the workspaces ReportViewer Servlet Working Path folder (specified by the @birt.viewer.root.path@ system property), Reports can then be called via a Browswer with URL parameters using relative non-system specific paths.


h2(. Datasources

Tracker Report Pack reports utilize property files or hidden report parameters to set up the datasource documents.  If the report is run with the Report Parameters embedded in the url 
@&rp_premises_doc=platform%3A%2Fresource%2Fcom.verticon.tracker.fair.example%2Fexample.premises@ then the report will use the @example.premises@ document from the @com.verticon.tracker.fair.example@ project as the datasource.  If the report parameters are not passed during launch then the report will load the local @report.properties@ file and the value of the @rp_premises_doc@ parameter.


h3(. Navigator Popup Menus

If the report parameter is not passed during launch as is the case for launching from the Navigator, then the report will attempt to load a @report.properties@ file from the same folder as the report and from this proprties file attempt obtain the value of the @rp_premises_doc@ parameter. 

h2(. Shared Resources

To minimize duplication the Tracker Reports infrastructure utilize a shared BIRT resource library.

h3(. Installation

On boot up Tracker Report Pack Reports and Shared Resources are automatically installed in the @working path@ directories of the Report Viewer.

# Find the default shared resource directory on your machine. It should be located in the Tracker installation
@tracker/plugins/org.eclipse.birt.report.viewer_*/birt@
# Create a resources folder in that directory
# Add the libraries in the @Library@ directory of this project to the @tracker/plugins/org.eclipse.birt.report.viewer_*/birt/resources@ folder
# Add any files in the @Styles@ directory to the @tracker/plugins/org.eclipse.birt.report.viewer_*/birt/resources@ folder
# Copy report(s) to @tracker/plugins/org.eclipse.birt.report.viewer_*/birt/report@ folder

Optional
# Copy report(s) to target project
## Copy the @report.properties@ file to the target project in the same directory as the copied reports
## Edit the @report.properties@ to reference the target premises document.


h3(. Library 

* @premises.rptlibrary@

h4(. DataSources

* @Premises@
** Use resource defined in file @report.properties@
** At runtime dynamically finds external file in the parent directory of the report 
*** Uses the parameter named @rp_premises_doc@ 

h4(. DataSets

* @Animals@
** Standard Animal attributes as columns
* @Events@
** Standard Event attributes as columns 
** Computed Columns
*** animalSpecies 
**** _Follow the hierarchy upward to the animal species code_ @row["@self"].getObject().getTag().getAnimal().getSpeciesCode().toString()@
*** animalSex 
**** _Similar to the above follow the hierarchy upward to the animal_ 
*** animalWeight 
**** _Similar to the above follow the hierarchy upward to the animal_
*** animalAdg 
**** _Similar to the above follow the hierarchy upward to the animal_
*** animalVisualId
**** _Similar to the above follow the hierarchy upward to the animal_
*** eventName 
**** _If its a GenericEvent get the name of the user created for it in the Object Class Definition_ @simpleName = row["@self"].getObject().getClass().getSimpleName(); resourceName = simpleName.substring(0,simpleName.indexOf("Impl"));if(resourceName == "GenericEvent"){resourceName = row["@self"].getObject().getOcd().getName()}@
*** values 
**** _Get the values for the event_ @row["@self"].getObject().values()@
* @MovedOut@
** MovedOut Event attributes as columns
* @SingleWeighIn@
** WeighIn Event attributes as columns
* @Premises@
** Standard Premises attributes as columns
* Grids
** @Banner and Label@

h3(. Style Sheets

* @corporate.css@
* @tracker.css@
 
h2. Animal Events Report Plan


h3. Purpose

__What is the purpose of the report?__

p(. The purpose of this report is to show the animals; the animal identification, weight, and ADG; and which each animal a list of the events associated with that animal. 

h3. Target

__Who is going to read the report?__

p(. Livestock premises managers and workers.

h3. Data

__What data should appear in the report?__

* Premises information in the report header
# Name of the Premises
# Address
# Administrator
# Phone
# URI

* Animal information in the grouping
# ID
# Visual ID
# Species
# Sex
# ADG

* For each animal group a list of associated events
# Date of Event
# Name of the Event
# Values for the event


h3. Source

__Where is the data coming from?__

p(. Premises document, via the EMF DataSource using the @premises.rptlibrary@ and the @Events@ and @Premises@ datasets.

h3. Calculated Data

Events are grouped by animal so, will need the following information on the animal


p(. None

h3. Calculation Methods

__How will the data be calculated?__

p(. N/A

h3. Interaction

__Do you want to enable the report user to specify what data to display?__

p(. Not at this time, but it in the future we may want to reuse this report, sharing it across projects.


h2. Animal Locations Report Plan


h3. Purpose

__What is the purpose of the report?__

p(. The purpose of this report is to show the last known location of all animals. Animal identification, types, weights, and locations will be shown. 

h3. Target

__Who is going to read the report?__

p(. Livestock premises managers and workers.

h3. Data

__What data should appear in the report?__

* Premises information in the report header
# Name of the Premises
# Address
# Administrator
# Phone
# URI

* An animal in each row in the table with the columns
# ID
# Visual ID
# Species
# Breed
# Sex
# Weight
# ADG
# Age
# Date of last sighting
# Location


h3. Source

__Where is the data coming from?__

p(. Premises document, via the EMF DataSource using the @premises.rptlibrary@ and the @Animals@ and @Premises@ datasets.

h3. Calculated Data

__Does any data need to be calculated?__

p(. Yes, for highlighting animals with ADG under 3 lbs.

h3. Calculation Methods

__How will the data be calculated?__

p(. In a highlighting trigger on the ADG column of the report.

h3. Interaction

__Do you want to enable the report user to specify what data to display?__

p(. Not at this time.

h2. Powered by Eclipse Technology

Verticon's Report Pack offering is powered by Eclipse technology and includes Eclipse plug-ins that
can be installed and used with other Eclipse-based offerings.
	
h2. License

Verticon, Inc. makes available all content in this plug-in (&quot;Content&quot;).  Unless otherwise 
indicated below, the Content is provided to you under the terms and conditions of the
Eclipse Public License version 1.0 (&quot;EPL 1&quot;).  A copy of the EPL 1 is available 
at <a href="http://www.eclipse.org/legal/epl-v10.html">http://www.eclipse.org/legal/epl-v10.html</a>.
For purposes of the EPL, &quot;Program&quot; will mean the Content.

If you did not receive this Content directly from the Verticon,Inc., the Content is 
being redistributed by another party (&quot;Redistributor&quot;) and different terms and conditions may
apply to your use of any object code in the Content.  Check the Redistributor's license that was 
provided with the Content.  If no such license exists, contact the Redistributor.  Unless otherwise
indicated below, the terms and conditions of the EPL 1 still apply to any source code in the Content
and such source code may be obtained at <a href="http://tracker.verticon.com/index.html">http://tracker.verticon.com/index.html</a>.</p>

