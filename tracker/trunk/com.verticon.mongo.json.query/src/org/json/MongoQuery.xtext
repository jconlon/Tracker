grammar org.json.MongoQuery with org.eclipse.xtext.common.Terminals

generate mongoQuery "http://www.json.org/MongoQuery"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Selector:
	
	   query=QueryObject (',' selection=Selection)?
	 
;

/**
 * Selection
 */
Selection:
	'{' 
	    {Selection}
		(fields+=FieldSelection)?
		(',' fields+=FieldSelection)* 

	'}';
	
FieldSelection:
	key=STRING ':' enabled=INT
;


/**
 * Queries
 */
QueryObject returns Query:
	'{' 
	    {QueryObject}
		(members+=Member)?
		(',' members+=Member)* 

	'}';

Member returns Query:
	key=Key ':' value=Value;


Value returns Query :
	(stringValue= Null | 
	 stringValue = Boolean | 
	 stringValue =  STRING | 
	 stringValue =  ID | 
	 numberValue = Number |
	 dateValue = JsonDate | 
	 arrayValue = Array |
	 integerValue = INT |
	 objectValue = QueryObject)
;

Array:
	{Array}
	'[' (values+=Value)? (',' values+=Value)* ']';
	
Key:
	 Conditional | ID | STRING 
;

Conditional returns ecore::EString:
	'$lt' | '$gt' | '$gte' | '$lte' | '$all' | '$exists' | '$mod' | '$ne' | '$in' | '$nin' | '$not' | '$or' | '$and' | '$size' | '$type' | '$near' | '$maxDistance';

Boolean returns ecore::EString:
   'true' | 'false';

Null returns ecore::EString:
  'null';
  
/*
 *     new Date()  
    new Date(milliseconds)  
    new Date(dateString)  
    new Date(year, month, day [, hour, minute, second, millisecond ])  
 */
JsonDate:
	DateNow | DateMilli | DateString | DateFull
;

DateNow returns JsonDate:
	{JsonDate}
	'new Date()'
;

DateMilli returns JsonDate:
	'new Date(' milliseconds=INT ')'
;

DateString returns JsonDate:
	'new Date(' dateString=STRING ')'
;

DateFull returns JsonDate:
	'new Date(' year=INT',' month=INT',' day=INT(',' hour=INT',' minute=INT',' second=INT',' millisecond=INT)? ')'
;


terminal Number returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	

	