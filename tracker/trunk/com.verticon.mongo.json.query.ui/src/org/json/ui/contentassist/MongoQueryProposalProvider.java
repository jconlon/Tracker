/*
 * generated by Xtext
 */
package org.json.ui.contentassist;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.jface.viewers.ArrayContentProvider;
import org.eclipse.jface.viewers.ITableLabelProvider;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.jface.window.Window;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.widgets.Display;
import org.eclipse.ui.dialogs.ListDialog;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ConfigurableCompletionProposal;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.eclipse.xtext.ui.editor.contentassist.ReplacementTextApplier;
import org.json.mongoQuery.FieldSelection;
import org.json.mongoQuery.Selection;
import org.json.services.MongoQueryGrammarAccess;

import com.google.inject.Inject;

/**
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on
 * how to customize content assistant
 */
public class MongoQueryProposalProvider extends
		AbstractMongoQueryProposalProvider {

	private static final String[] OPERATORS = new String[] { "$lt", "$gt",
			"$gte", "$lte", "$all", "$exists", "$mod", "$ne", "$in", "$nin",
			"$not", "$or", "$and", "$size", "$type", "$near", "$maxDistance" };

	private static final String[] OPERATORS_LABELS = new String[] {
			"less than", "greater than", "greater than or equal to",
			"less than or equal to", "all in", "exists", "modulo", "not equal",
			"in", "not in", "not", "or", "and", "size", "type", "near",
			"max distance" };

	@Inject
	private MongoFields fieldProvider;
	@Inject
	MongoQueryGrammarAccess grammarAccess;

	
	/* (non-Javadoc)
	 * @see org.json.ui.contentassist.AbstractMongoQueryProposalProvider#complete_DateFull(org.eclipse.emf.ecore.EObject, org.eclipse.xtext.RuleCall, org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext, org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor)
	 */
	@Override
	public void complete_DateFull(EObject model, RuleCall ruleCall,
			final ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		// TODO 
		ConfigurableCompletionProposal pickField = (ConfigurableCompletionProposal) createCompletionProposal(
				"Pick date...", context);
		if (pickField != null) {
			pickField.setTextApplier(new ReplacementTextApplier() {
				@Override
				public String getActualReplacementString(
						ConfigurableCompletionProposal proposal) {
					Display display = context.getViewer().getTextWidget()
							.getDisplay();
					DateDialog dateDialog = new DateDialog(display
							.getActiveShell());
//					listDialog
//							.setContentProvider(new ArrayContentProvider());
//					dateDialog.setTitle("Date");
//					dateDialog.setMessage("Choose the date");
//					listDialog.setLabelProvider(new LabelProvider());
//					listDialog.setInput(fieldProvider);
					if (dateDialog.open() == Window.OK) {
//						Object[] result = listDialog.getFirstName();
//
//						StringBuffer sb = new StringBuffer();
//						sb.append("'").append((String) result[0])
//								.append("'");
						return dateDialog.getDateTime();

					}
					return null;

				}
			});
			acceptor.accept(pickField);
		}
		super.complete_DateFull(model, ruleCall, context, acceptor);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.json.ui.contentassist.AbstractMongoQueryProposalProvider#
	 * completeFieldSelection_Enabled(org.eclipse.emf.ecore.EObject,
	 * org.eclipse.xtext.Assignment,
	 * org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext,
	 * org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor)
	 */
	@Override
	public void completeFieldSelection_Enabled(EObject model,
			Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		acceptor.accept(createCompletionProposal("0", "0 - Disabled", null,
				context));
		super.completeFieldSelection_Enabled(model, assignment, context,
				acceptor);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.json.ui.contentassist.AbstractMongoQueryProposalProvider#
	 * completeFieldSelection_Key(org.eclipse.emf.ecore.EObject,
	 * org.eclipse.xtext.Assignment,
	 * org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext,
	 * org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor)
	 */
	@Override
	public void completeFieldSelection_Key(EObject model,
			Assignment assignment, final ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {

		acceptor.accept(createCompletionProposal("'field'", "field - String",
				null, context));

		if (fieldProvider != null && !fieldProvider.isEmpty()) {
			ConfigurableCompletionProposal pickField = (ConfigurableCompletionProposal) createCompletionProposal(
					"Pick field...", context);
			if (pickField != null) {
				pickField.setTextApplier(new ReplacementTextApplier() {
					@Override
					public String getActualReplacementString(
							ConfigurableCompletionProposal proposal) {
						Display display = context.getViewer().getTextWidget()
								.getDisplay();
						ListDialog listDialog = new ListDialog(display
								.getActiveShell());
						listDialog
								.setContentProvider(new ArrayContentProvider());
						listDialog.setTitle("Field");
						listDialog.setMessage("Choose the field");
						listDialog.setLabelProvider(new LabelProvider());
						listDialog.setInput(fieldProvider);
						if (listDialog.open() == Window.OK) {
							Object[] result = listDialog.getResult();

							StringBuffer sb = new StringBuffer();
							sb.append("'").append((String) result[0])
									.append("'");
							return sb.toString();

						}
						return null;

					}
				});
				acceptor.accept(pickField);
			}

		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.json.ui.contentassist.AbstractMongoQueryProposalProvider#
	 * completeMember_Key(org.eclipse.emf.ecore.EObject,
	 * org.eclipse.xtext.Assignment,
	 * org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext,
	 * org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor)
	 */
	@Override
	public void completeMember_Key(EObject model, Assignment assignment,
			final ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {

		final List<String[]> input = new ArrayList<String[]>();
		acceptor.accept(createCompletionProposal("'field'", "field - String",
				null, context));

		for (int i = 0; i < OPERATORS.length; i++) {
			input.add(new String[] { OPERATORS[i], OPERATORS_LABELS[i] });

			// acceptor.accept(createCompletionProposal(
			// OPERATORS[i], OPERATORS[i]+" - "+OPERATORS_LABELS[i], null,
			// context));

		}
		if (fieldProvider != null && !fieldProvider.isEmpty()) {
			ConfigurableCompletionProposal pickField = (ConfigurableCompletionProposal) createCompletionProposal(
					"Pick field...", context);
			if (pickField != null) {
				pickField.setTextApplier(new ReplacementTextApplier() {
					@Override
					public String getActualReplacementString(
							ConfigurableCompletionProposal proposal) {
						Display display = context.getViewer().getTextWidget()
								.getDisplay();
						ListDialog listDialog = new ListDialog(display
								.getActiveShell());
						listDialog
								.setContentProvider(new ArrayContentProvider());
						listDialog.setTitle("Field");
						listDialog.setMessage("Choose the field");
						listDialog.setLabelProvider(new LabelProvider());
						listDialog.setInput(fieldProvider);
						if (listDialog.open() == Window.OK) {
							Object[] result = listDialog.getResult();

							StringBuffer sb = new StringBuffer();
							sb.append("'").append((String) result[0])
									.append("'");
							return sb.toString();

						}
						return null;

					}
				});
				acceptor.accept(pickField);
			}
		}
		ConfigurableCompletionProposal pickConditional = (ConfigurableCompletionProposal) createCompletionProposal(
				"Pick Conditional Operator...", context);
		if (pickConditional != null) {
			pickConditional.setTextApplier(new ReplacementTextApplier() {
				@Override
				public String getActualReplacementString(
						ConfigurableCompletionProposal proposal) {
					Display display = context.getViewer().getTextWidget()
							.getDisplay();
					ListDialog listDialog = new ListDialog(display
							.getActiveShell());
					listDialog.setContentProvider(new ArrayContentProvider());
					listDialog.setTitle("Conditional Operators");
					listDialog.setMessage("Choose the operator");
					listDialog.setLabelProvider(new ArrayLabelProvider());
					listDialog.setInput(input);
					if (listDialog.open() == Window.OK) {
						Object[] result = listDialog.getResult();
						String[] choice = (String[]) result[0];
						return choice[0];

					}
					return null;

				}
			});
			acceptor.accept(pickConditional);
		}

		super.completeMember_Key(model, assignment, context, acceptor);
	}

	@Override
	public void completeKeyword(Keyword keyword,
			ContentAssistContext contentAssistContext,
			ICompletionProposalAcceptor acceptor) {
		// Remove commas after {
		if (keyword.getValue().equals(",")
				&& contentAssistContext.getLastCompleteNode().getText()
						.equals("{")) {
			// System.out.println("Rejecting Comma Keyword "+lastNode);
			return;

		}
		// if
		// (grammarAccess.getFieldSelectionAccess().getColonKeyword_1().equals(keyword))
		// {
		System.out.println(keyword.getValue() + " Keyword");
		// }else{
		super.completeKeyword(keyword, contentAssistContext, acceptor);
		// }
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.eclipse.xtext.ui.editor.contentassist.
	 * AbstractJavaBasedContentProposalProvider
	 * #completeAssignment(org.eclipse.xtext.Assignment,
	 * org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext,
	 * org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor)
	 */
	@Override
	public void completeAssignment(Assignment assignment,
			ContentAssistContext contentAssistContext,
			ICompletionProposalAcceptor acceptor) {
		// if
		// (grammarAccess.getFieldSelectionAccess().getEnabledAssignment_2().equals(assignment))
		// {
		// System.out.println("Enabled Assignment");
		// }else{
		System.out.println(assignment.getFeature() + " Assignment");
		super.completeAssignment(assignment, contentAssistContext, acceptor);
		// }
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.eclipse.xtext.ui.editor.contentassist.AbstractContentProposalProvider
	 * #createCompletionProposal(java.lang.String, java.lang.String,
	 * org.eclipse.swt.graphics.Image,
	 * org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext)
	 */
	@Override
	public ICompletionProposal createCompletionProposal(String proposal,
			String displayString, Image image,
			ContentAssistContext contentAssistContext) {

		if (contentAssistContext.getCurrentModel() instanceof FieldSelection) {
			return super.createCompletionProposal(proposal, "FieldSelection : "
					+ displayString, image, contentAssistContext);
		}
		if (contentAssistContext.getCurrentModel() instanceof Selection) {
			if (proposal.startsWith("\"Key")) {
				return null;
			}
			return super.createCompletionProposal(proposal, "Selection : "
					+ displayString, image, contentAssistContext);
		}

		if (displayString.startsWith("$")) {
			return super.createCompletionProposal(proposal,
					"Conditional Operator : " + displayString, image,
					contentAssistContext);
		}

		String name = contentAssistContext.getCurrentModel().getClass()
				.getSimpleName();
		name = name.replace("Impl", "");
		// TODO Auto-generated method stub
		return super.createCompletionProposal(proposal, name + " : "
				+ displayString, image, contentAssistContext);
	}

	class ArrayLabelProvider extends LabelProvider implements
			ITableLabelProvider {
		public String getText(Object element) {
			return ((String[]) element)[0].toString();
		}

		@Override
		public Image getColumnImage(Object element, int columnIndex) {
			return null;
		}

		@Override
		public String getColumnText(Object element, int columnIndex) {
			String[] ss = (String[]) element;
			return ss[columnIndex] + " - " + ss[columnIndex + 1];
		}
	}

}
