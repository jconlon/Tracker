/*
 * Copyright (c) 2003-2005 Vericon, Inc. All Rights Reserved.
 *
 * This SOURCE CODE FILE, which has been provided by VERTICON, INC. as part
 * of an Verticon, Inc. product for use ONLY by licensed users of the product,
 * includes CONFIDENTIAL and PROPRIETARY information of Verticon Inc.
 *
 * USE OF THIS SOFTWARE IS GOVERNED BY THE TERMS AND CONDITIONS
 * OF THE LICENSE STATEMENT AND LIMITED WARRANTY FURNISHED WITH
 * THE PRODUCT.
 *
 * IN PARTICULAR, YOU WILL INDEMNIFY AND HOLD VERTICON, INC., ITS RELATED
 * COMPANIES AND ITS SUPPLIERS, HARMLESS FROM AND AGAINST ANY CLAIMS
 * OR LIABILITIES ARISING OUT OF THE USE, REPRODUCTION, OR DISTRIBUTION
 * OF YOUR PROGRAMS, INCLUDING ANY CLAIMS OR LIABILITIES ARISING OUT OF
 * OR RESULTING FROM THE USE, MODIFICATION, OR DISTRIBUTION OF PROGRAMS
 * OR FILES CREATED FROM, BASED ON, AND/OR DERIVED FROM THIS SOURCE
 * CODE FILE.
 --------------------------------------------------------------------------------
 Copyright (c) 2003 - 2005 Verticon, Inc. All Rights Reserved.
 --------------------------------------------------------------------------------
 */

/**
* react2StandAloneEmulated.bsh
* Specification for a standalone React2 Gui Application that emulates movement
* of people and objects.
*
* Events:
* This script specifies a BlockingQueue (component#pico.2), that allows genertated events
* from a StartableTimerTask, (component#grandChild.1) in this configuration and the React2
* com.verticon.react2.nano.StartableEventProcessor, (component#child.7).
*
* Attributes:
* UIDObject attributes are discovered by a LDAPURIAttributesFinder (component#pico.1), that
* finds finds an LDAP directory server that is being advertised on the local network
* with Multicast-DNS (aka m-DNS or ZeroConf) with the DEFAULT ZEROCONF SERVICE
* NAME = "http://react2.verticon.com/";
* and the service TYPE = "_ldap._tcp.local."
* The System property "react2.ldap.zeroconf.name" can be used to override the DEFAULT ZEROCONF
* SERVICE NAME.
*
*
* Graphics:
* Visualization of locations on a graphic map is accomplished by a ImageMapVisualQuery
* (component#grandchild.17). This component utilizes standard an HTML document with
* IMAGE and MAP elements for mapping a background *,png image to a set of locations
* assigned to uri labels.
* <p>HTML IMAGE MAP documents can easily be created
* by utilizing the OpenSource graphics editor <em>The GIMP</em> and
* the imageMap plug in that is included as part of the <em>The GIMP</em></p>
* <p>Instructions for creating HTML IMAGE MAP documents. <em>(The GIMP handles all
* of this for you behind its gui.)</em></p>
* <ol>
* <li>Use PNG files as backgrounds  for the best graphic effects.</li>
* <li>When mapping areas only rectangle shapes are supported; i.e. only the SHAPE="RECT"
* attribute should be used.</li>
* <li>Specify the VisualQuery Descripion as an html comment. Within the comment
*  the text ' #$DESCRIPTION:' must preceede the description. The GIMP ImageMapper
* plug in does this for you when you add a description to the document.
* </li>
* <li>The uri labels are assigned as HREF attributes to the Area elements. </li>
* <li>The VISUAL_QUERY_IMAGEMAP variable is used by this script to reference
* the HTML IMAGE MAP document</li>
* </ol>
* <p>When deploying resources it may be necessary to override resource references.
* This is the case when image map documents and or graphics png files are served
* by JNLP servers and component repositories.</p>
* <ol>
* <li>The System property "react2.gui.visualquery.imagemap" can be used to override
* this scripts VISUAL_QUERY_IMAGEMAP variable.</li>
* <li>The System property "react2.gui.visualquery.image" can be used to override
* the referenced graphic in the IMAGE element.</li>
* </ol>
*
*/
import org.nanocontainer.integrationkit.*;
import org.picocontainer.*;
import org.picocontainer.defaults.*;

import com.verticon.util.concurrent.*;
import java.util.concurrent.*;
import java.awt.*;
import org.mandarax.kernel.KnowledgeBase;
import org.mandarax.reference.*;

import com.verticon.util.*;
import com.verticon.generated.Version;
import com.verticon.event.*;
import com.verticon.jndi.*;
import com.verticon.ldap.*;
import com.verticon.ldap.util.*;
import com.verticon.mandarax.*;
import com.verticon.mandarax.logic.*;

import com.verticon.react2.*;
import com.verticon.react2.business.*;
import com.verticon.react2.event.inbound.*;
import com.verticon.react2.nano.*;

import com.verticon.react2.loader.*;
import com.verticon.react2.test.*;
import com.verticon.react2.mandarax.*;
import com.verticon.react2.mandarax.logic.*;
import com.verticon.react2.gui.*;
import com.verticon.react2.gui.nano.*;
import com.verticon.react2.gui.mandarax.*;
import com.verticon.jmDns.ldap.*;

//Version 2.0

//@ToDo Remove all event generation to the mule container. This specification
//should eventually become site generic.

//==============================================================================
//                           Site specific section
//==============================================================================
//The site specific section defines a background image with mapped ldap location
//names and boundary dimensions. An optional set of specifications control the
//generation of test information.


//This section is divided into a variable section
//and a component section.

//Site specific variables
//Specify how often to generate a random movement.
private final static int DELAY, PERIOD = 1* 1000;

//VISUAL_QUERY_IMAGEMAP is the URL imageMap HTML document that specifies how to map locations
//to a visual graphic.
//Note:The System property "react2.gui.visualquery.imagemap" can be used to override
//this VISUAL_QUERY_IMAGEMAP variable.
//Note: The System property "react2.gui.visualquery.image" can be used to override
//the referenced graphic in the IMAGE element.

File imageMapFile = new File(System.getProperty("user.dir"),"examples/example_1_imageMap.html");
VISUAL_QUERY_IMAGEMAP = imageMapFile.toURL();

/* ----  Only edit below this line if you know what you are doing. -----------*/

//Global variables
private final static String LDAP_URI_SEARCH_SCOPE = "sub";
private final static String LDAP_SEARCH_ATTRIBUTE = "labeledURI";

//Should URIObjects be imported at startup?
private final static String IMPORT_URIOBJECT_CONDITION =
    "count(movingObjects)=0";
private final static String IMPORT_URIOBJECT_BULKLOAD_FILTER =
    "(labeledURI=*)";
private final static String IMPORT_URI_ATTRIBUTE = "labeledURI";

//URIObject Definitions
private final static String URIOBJECT_DEFINITION_LOCATION =
    "objectClass='locality'";
private final static String URIOBJECT_DEFINITION_PERSON =
    "objectClass='eduPerson' or objectClass='inetOrgPerson' or objectClass='person' or objectClass='residentialPerson'";


/**
* Specify a hierarchy of pico containers.
*
*      pico -  container for Global components
*            |
*      child - container for React2Server compenents
*            |
*      grandChild - container for React2Client components
*
*/

pico = new DefaultPicoContainer();


//Global components
/**
* Add to the parent pico container the components:
* ContextFinder, URIAttributesFinder, Channel, TimerService
*/


//1. URIAttributesFinder for finding one or more LDAP entrys that have a
//labeledURI attribute.  Uses ZeroConf to discover the Directory Context.
pico.registerComponentImplementation(URIAttributesFinder.class,
                                          LDAPURIAttributesFinder.class,
                                          new Parameter[] { //PARMS
  new ConstantParameter(LDAP_URI_SEARCH_SCOPE),
  new ConstantParameter(LDAP_SEARCH_ATTRIBUTE)
}
);

//2.BlockingQueue allows events to move from the components genertating events
// like the StartableTimerTask (grandchild.1) in this configuration
// to the React2 com.verticon.react2.nano.StartableEventProcessor.
//ie StartableTimerTask ->events -> BlockingQueue -> StartableEventProcessor
   BlockingQueue q = new LinkedBlockingQueue();
   pico.registerComponentInstance(Puttable.class,
                                             QUtil.asPuttable(q));
   pico.registerComponentInstance(Takable.class,
                                             QUtil.asTakable(q));

//3.TimerService
//@todo replace with appropriate component for event input
//TimerService(StartableTimerTask) ->events -> BlockingQueue -> StartableEventProcessor
// Global timerService that schedules various tasks
// Candidate for movement to the parent in a production script.
// see grandchild component 1.
pico.registerComponentImplementation(TimerService.class,
                                          TimerServiceImpl.class);

/**
* Create a child container to specify local React2Service components:
*
* Location and Person URIObjectDefinition objects;
* ImportConfig; URIObjectCreator, EventGeneratingModel; React2Service; EventProcessor
*/

MutablePicoContainer child = new DefaultPicoContainer(pico);
pico.registerComponentInstance(child);

//1.URIObjectDefinitions to create a Location URIObject
//URIObjectDefinitionImpl(Class implementation, String xpath)
child.registerComponentImplementation(Location.class.getName(), //URIObjectDefinition pico key
                                          URIObjectDefinitionImpl.class,
                                          new Parameter[] { //PARMS
  new ConstantParameter(
      Location.class), //implementation
      new ConstantParameter(
      URIOBJECT_DEFINITION_LOCATION) //XPath
}
);

//2.URIObjectDefinition to create a  Person URIObject
//URIObjectDefinitionImpl(Class implementation, String xpath)
child.registerComponentImplementation(Person.class.getName(), //Person pico key
                                          URIObjectDefinitionImpl.class,
                                          new Parameter[] { //PARMS
  new ConstantParameter(
      Person.class), //implementation
      new ConstantParameter(
      URIOBJECT_DEFINITION_PERSON) //XPath
}
);

//3.ImportConfig
//Configuration for the URIObject import at startup
//ImportConfigImpl(String importCondition, String bulkLoadFilter, String uriAttribute)
child.registerComponentImplementation(ImportConfig.class,
                                          ImportConfigImpl.class,
                                          new Parameter[] { //PARMS
  new ConstantParameter(
      IMPORT_URIOBJECT_CONDITION), //importCondition
      new ConstantParameter(
      IMPORT_URIOBJECT_BULKLOAD_FILTER), //bulkLoadFilter
      new ConstantParameter(
      IMPORT_URI_ATTRIBUTE) //uriAttribute

}
);

//4.URIObjectCreatorImpl
// Creates URIObjects according to external information offered in an
// uriAttributesFinder and
// based on a set of definitions given in URIObjectDefinition objects.
//URIObjectCreatorImpl(URIObjectCreatorImpl(URIAttributesFinder uriAttributesFinder,
//                              ImportConfig importConfig,
//                              URIObjectDefinition[] uriObjectDefinitions)
child.registerComponentImplementation(URIObjectFactory.class,
                                          URIObjectFactoryImpl.class);

//5. Model
child.registerComponentImplementation(Model.class,
                                          ModelImpl.class);

//6. React2ServiceImpl
//React2ServiceImpl(Model model)
child.registerComponentImplementation(React2Service.class,
                                          React2ServiceImpl.class);

//7. StartableEventProcessor
//   The takable (channel) is from the parent container and is an aggregate of the
//   Event sources coming from the other react2ServerChildren containers.
//   Startable in order to
//    import initial URIObjects
//    and start the event processing thread.
//StartableEventProcessor(Takable takable, React2Service react2Service,
//                        URIObjectCreator uriObjectCreator)
child.registerComponentImplementation(EventProcessor.class,
                                          StartableEventProcessor.class);


/**
* Create a grandChild container to specify a Random Event generator
* a Mandarax KnowledgeBase and a local React2 Client Gui components
*/

MutablePicoContainer grandChild = new DefaultPicoContainer(child);
// We must let the parent container know about the child container.
child.registerComponentInstance(grandChild);


//1. Generator for UIDEvents.
//@todo replace with appropriate class for event input
//@see TimerService child.3
//StartableTimerTask(Model model,
//  Puttable channel,TimerService timerService, int delay, int period)
//  Uses the TimerService to generate events and place them on the channel

grandChild.registerComponentImplementation(RandomTimerTask2.class,
    StartableTimerTask.class,
    new Parameter[] {
        new ComponentParameter(Model.class),//Must match exact keys
        new ComponentParameter(Puttable.class),
        new ComponentParameter(TimerService.class),
        new ConstantParameter(new Integer(DELAY)),
        new ConstantParameter(new Integer(PERIOD))
    }
);

//Logic Support
private final LogicSupport logic = new LogicSupport();
//2.SwingEventAdaptor
//SwingEventAdaptorImpl(React2Service service)
grandChild.registerComponentImplementation(SwingEventAdaptor.class,
                                     SwingEventAdaptorImpl.class);

//3-4 Base Rules
grandChild.registerComponentInstance("rule-isAccompanied",
                                    URIObjectArithmetic.IS_ACCOMPANIED_RULE);
grandChild.registerComponentInstance("rule-not-accompanied",
                                    URIObjectArithmetic.
                                    IS_NOT_ACCOMPANIED_RULE);

//5. LocationResidents: Color and Comment for UnAccompanied objects in locations
grandChild.registerComponentInstance("rule-isNotAccompaniedResidentStatus",
                                    logic.rule(
    logic.prereq(
    URIObjectArithmetic.IS_NOT_ACCOMPANIED,
    logic.variable("object", MovingURIObject.class),
    logic.variable("location", Location.class)
    ),
    logic.fact(GuiArithmetic.RESIDENT_STATUS,
               logic.variable("object", MovingURIObject.class),
               logic.variable("location", Location.class),
               logic.cons(java.awt.Color.red, Color.class),
               logic.cons("Object is not accompanied by an owner", String.class)
               )
    )
                                    );
//6. LocationResidents: Color and comment for Accompanied objects in locations
grandChild.registerComponentInstance("rule-isAccompaniedResidentStatus",
                                    logic.rule(
    logic.prereq(URIObjectArithmetic.IS_ACCOMPANIED,
                 logic.variable("object",
                                MovingURIObject.class),
                 logic.variable("location",
                                Location.class)
                 ),
    logic.fact(GuiArithmetic.RESIDENT_STATUS,
               logic.variable("object",
                              MovingURIObject.class),
               logic.variable("location",
                              Location.class),
               logic.cons(java.awt.Color.green, Color.class),
               logic.cons("Object accompanied by an owner",
                          String.class)
               )
    )
);

//7.KnowledgeBase
grandChild.registerComponentImplementation(KnowledgeBase.class,
                                          AdvancedKnowledgeBase.class);

//8.KnowledgeBaseIntegrator
//Integrates the Rules and the KnowledgeBase implementation
//KnowledgeBaseIntegratorImpl(KnowledgeBase knowledgeBase,ClauseSet[] clauseSets,
//                                     React2Service react2Service)
grandChild.registerComponentImplementation(KBQueryHandler.class,
                                          KBQueryHandlerIntegratorImpl.class);

//Array of TablularQuery to specify menu items for launching table panel queries

//9. TablularQuery
//TabularQueryImpl(String name, String xpath,
//                         String description, boolean displayAtStart,
//                         String objectType)
grandChild.registerComponentImplementation("tabularQuery - All Locations" ,
                                          TabularQueryImpl.class,
                                          new Parameter[] { //PARMS
  new ConstantParameter(
      "All Locations"), //name
      new ConstantParameter(
      "locations"), //xpath
      new ConstantParameter(
      "Show All locations."), //description
      new ConstantParameter(
      Boolean.TRUE), //displayAtStart
      new ConstantParameter(
      "locations") //objectType
}
);

//10. TablularQuery
//TabularQueryImpl(String name, String xpath,
//                         String description, boolean displayAtStart,
//                         String objectType)
grandChild.registerComponentImplementation("tabularQuery - All People",
                                          TabularQueryImpl.class,
                                          new Parameter[] { //PARMS
  new ConstantParameter(
      "All People"), //name
      new ConstantParameter(
      "people"), //xpath
      new ConstantParameter(
      "Show All People"), //description
      new ConstantParameter(
      Boolean.FALSE), //displayAtStart
      new ConstantParameter(
      "people") //objectType
}
);

//11. TablularQuery
//TabularQueryImpl(String name, String xpath,
//                         String description, boolean displayAtStart,
//                         String objectType)
grandChild.registerComponentImplementation("tabularQuery - All MovingObjects",
                                          TabularQueryImpl.class,
                                          new Parameter[] { //PARMS
  new ConstantParameter(
      "All MovingObjects"), //name
      new ConstantParameter(
      "movingObjects"), //xpath
      new ConstantParameter(
      "Show All MovingObjects"), //description
      new ConstantParameter(
      Boolean.FALSE), //displayAtStart
      new ConstantParameter(
      "movingObjects") //objectType
}
);

//12. TablularQuery
//TabularQueryImpl(String name, String xpath,
//                         String description, boolean displayAtStart,
//                         String objectType)
grandChild.registerComponentImplementation("tabularQuery - Locations with Residents",
                                          TabularQueryImpl.class,
                                          new Parameter[] { //PARMS
  new ConstantParameter(
      "Locations with Residents"), //name
      new ConstantParameter(
      "locations[count(residents) >0]"), //xpath
      new ConstantParameter(
      "All locations with a least one resident person or moveable object."), //description
      new ConstantParameter(
      Boolean.FALSE), //displayAtStart
      new ConstantParameter(
      "locations") //objectType
}
);

//13. TablularQuery
//TabularQueryImpl(String name, String xpath,
//                         String description, boolean displayAtStart,
//                         String objectType)
grandChild.registerComponentImplementation("tabularQuery - People Visiting Multiple Locatons",
                                          TabularQueryImpl.class,
                                          new Parameter[] { //PARMS
  new ConstantParameter(
      "People Visiting Multiple Locations"), //name
      new ConstantParameter(
      "people[count(movementHistory) >3]"), //xpath
      new ConstantParameter(
      "All people who have visited more than 3 locations."), //description
      new ConstantParameter(
      Boolean.FALSE), //displayAtStart
      new ConstantParameter(
      "people") //objectType
}
);

//14. TablularQuery
//TabularQueryImpl(String name, String xpath,
//                         String description, boolean displayAtStart,
//                         String objectType)
grandChild.registerComponentImplementation("tabularQuery - Locations with No Residents",
                                          TabularQueryImpl.class,
                                          new Parameter[] { //PARMS
  new ConstantParameter(
      "Locations with No Residents"), //name
      new ConstantParameter(
      "locations[count(residents) =0]"), //xpath
      new ConstantParameter(
      "All locations with no people or moveable objects."), //description
      new ConstantParameter(
      Boolean.TRUE), //displayAtStart
      new ConstantParameter(
      "locations") //objectType
}
);

//16. TablularQuery
//TabularQueryImpl(String name, String xpath,
//                         String description, boolean displayAtStart,
//                         String objectType)
grandChild.registerComponentImplementation("tabularQuery - Objects Assigned to Owners",
                                          TabularQueryImpl.class,
                                          new Parameter[] { //PARMS
  new ConstantParameter(
      "Objects Assigned to Owners"), //name
      new ConstantParameter(
      "movingObjects[attributes/@owner]"), //xpath
      new ConstantParameter(
      "All movingObjects that are assigned to an owner."), //description
      new ConstantParameter(
      Boolean.TRUE), //displayAtStart
      new ConstantParameter(
      "movingObjects") //objectType
}
);



//17. VisualQuery
//Configuration for the URIObject import at startup
//VisualQueryImpl(String name, String xpath, String background,
//                         String description, boolean displayAtStart,
//                         LocationCoordinates[] locationCoordinates)

//ImageMapVisualQuery(String name)
grandChild.registerComponentImplementation(VisualQuery.class,
                                          ImageMapVisualQuery.class,
                                          new Parameter[] { //PARMS
  new ConstantParameter(VISUAL_QUERY_IMAGEMAP) //locationCoordinates
  }
);

//@todo move to appropriate place for children in the script
//UriListener to listen to URI Events and open an external browser
child.registerComponentImplementation(UriListener.class, // key
                                          UriListenerImpl.class);


//18. React2Gui to create the GUI
//React2GuiImpl2(React2Service react2Service, QueryHandler queryHandler,
//                        TabularQuery[] queries,
//                        VisualQuery visualQuery)
grandChild.registerComponentImplementation(React2Gui.class, // key
                                          StartableReact2Gui.class);


