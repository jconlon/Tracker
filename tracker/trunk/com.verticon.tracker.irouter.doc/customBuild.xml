<!--
    This is the current documentation ant file.  It is full blown docbook toolchain.
  
	Some of the code below was authored by
	(c) Chris Aniszczyk <caniszczyk@gmail.com>
    (c) Lawrence Mandel <lmandel@ca.ibm.com>
    (c) Peter Friese <peter.friese@itemis.com>
-->
<project name="irouter.doc - customBuild.xml, the xtext variation in development. Uses toc.xml" 
	default="build-doc" basedir=".">
	
	<!--
		Global vars
	-->
	<property name="build.dir"   value="build"/>
	<property name="document.name" value="irouter"/>
	<property name="document.stylesheet" value="styles/html.xsl"/>
	<property name="document.pdf.stylesheet" value="styles/xmpp.xsl"/>
	<property name="document.eclipse.stylesheet" value="styles/eclipsehelp.xsl"/>
	<property name="eclipsehelp-css.file" value="styles/book.css" />
	<property name="html-css.file" value="styles/book.css" />
	<property name="download.dir" value="${file.separator}opt${file.separator}publishing"/>
	<property name="thisproject" location="${ant.file}/.."/>
	<property name="xalan.lib.dir" location="${thisproject}/../com.verticon.tracker.documentation/lib/xalan-j_2_7_0" />
	<property name="deploy.dir" location="${user.home}/Uploads/s3/Tracker/documentation"/>
	<property name="document.pdf" location="manual${file.separator}${document.name}.pdf"/>
    <property name="document.footer.name" value="${document.name}-0.1.0 draft"/>

	<!-- Making xalan available -->
		<path id="xalan.class.path">
			<pathelement location="${xalan.lib.dir}/serializer.jar" />
			<pathelement location="${xalan.lib.dir}/xalan.jar" />
			<pathelement location="${xalan.lib.dir}/xercesImpl.jar" />
			<pathelement location="${xalan.lib.dir}/xml-apis.jar" />
		</path>

	<!--  
		WikiText Toolchain 
	<property name="wikitext.url" value="http://ftp-stud.fht-esslingen.de/pub/Mirrors/eclipse/tools/mylyn/update/weekly/mylyn-wikitext-standalone-latest.zip"/>
	-->
	<property name="wikitext.url" value="http://download.eclipse.org/tools/mylyn/update/weekly/mylyn-wikitext-standalone-latest.zip"/>
	<property name="wikitext.dir" value="${download.dir}${file.separator}wikitext"/>

	<target name="clean" depends="init">
			<delete includeemptydirs="true" failonerror="false">
				<fileset dir="tmp"/>
				<fileset dir="build" includes="**/*"/>
				<fileset dir="html" includes="**/*"/>
				<fileset dir="docbook" includes="**/*"/>
				<fileset dir="help" includes="**/*"/>
			</delete>
	</target>
	
	<target name="check-wikitext">
		<condition property="hasWikiText">
			<and>
				<available file="${download.dir}${file.separator}wikitext.zip" property="hasWikiTextZIP"/>
				<available file="${wikitext.dir}" property="hasWikiTextDir"/>
			</and>
		</condition>
	</target>
	
	<target name="get-wikitext" description="Downloads WikiText" depends="check-wikitext" unless="hasWikiText">
		<echo>Downloading WikiText...</echo>
		<get dest="${download.dir}${file.separator}wikitext.zip" src="${wikitext.url}"/>
		<unzip src="${download.dir}${file.separator}wikitext.zip" dest="${wikitext.dir}">
			<patternset includes="**/*.jar"/>
			<mapper type="flatten"/>
		</unzip>
	</target>
	
	<target name="install-wikitext" depends="get-wikitext">
		<taskdef resource="org/eclipse/mylyn/wikitext/core/util/anttask/tasks.properties">
			<classpath>
				<fileset dir="${basedir}/lib/plugins">
					<include name="org.eclipse.xtext.wikitext.core*.jar"/>
				</fileset>
				<fileset dir="${wikitext.dir}">
					<include name="org.eclipse.mylyn.wikitext.*core*.jar"/>
				</fileset>
			</classpath>
		</taskdef>
	</target>
	
	<target name="assemble">
		<loadfile srcfile="doc/${document.name}-index.txt" property="inputfiles">
		  <filterchain>
			<tokenfilter>
			    <replacestring from="\n" to=","/>
			</tokenfilter>
		  </filterchain>
		</loadfile>
		<concat destfile="${build.dir}${file.separator}${document.name}.textile" 
			append="false" fixlastline="yes">
			<filelist dir="doc" files="${inputfiles}"/>
		</concat>
	</target>
	
	<target name="wikitext2docbook" depends="init, install-wikitext, get-docbook-xsl, get-fop,assemble" 
		description="Generate DocBook from Textile">
		<!--
		<wikitext-to-docbook 
			markupLanguage="org.eclipse.xtext.wikitext.XtextTextileDialect"
			booktitle="Tracker iRouter User Guide"
			validate="true">
			<fileset dir="${build.dir}">
	 			<include name="${document.name}.textile"/>
			</fileset>
		</wikitext-to-docbook>
		-->
		<wikitext-to-docbook 
			booktitle="Tracker iRouter User Guide"
			markupLanguage="Textile"
			validate="true">
						<fileset dir="${build.dir}">
				 			<include name="${document.name}.textile"/>
						</fileset>
		</wikitext-to-docbook>

	 </target>
	
	<!--
		DocBook Toolchain
	-->
	<!-- <property name="docbook.version" value="1.73.2" /> -->
	<property name="docbook.version" value="1.76.0" />
	<!--
	<property name="docbook.dir" value="${download.dir}${file.separator}docbook-xsl-${docbook.version}"/>
	-->
	<property name="docbook.dir" value="${file.separator}opt${file.separator}Docbook${file.separator}docbook-xsl-${docbook.version}"/>
	<property name="docbookxsl.url" value="http://internap.dl.sourceforge.net/sourceforge/docbook/docbook-xsl-${docbook.version}.zip"/>
	<!--
	<property name="fop.dir" value="${download.dir}${file.separator}fop-0.95"/>
	-->
	<property name="fop.dir" value="${file.separator}opt${file.separator}FOP${file.separator}fop-1.0"/>
		
	
	<property name="fop.url" value="http://mirrorspace.org/apache/xmlgraphics/fop/binaries/fop-0.95-bin.zip"/>
	<property name="jai.dir" value="ENTER_JAI_DIRECTORY"/>
	
    <macrodef name="docbook2pdf">
        <attribute name="source"/>
    	<attribute name="target"/>
        <sequential>
        	<taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop">
        		<classpath>
        			<pathelement location="${fop.dir}${file.separator}build${file.separator}fop.jar" />
        			<pathelement location="${fop.dir}${file.separator}lib${file.separator}avalon-framework-4.2.0.jar" />
        			<pathelement location="${fop.dir}${file.separator}lib${file.separator}commons-logging-1.0.4.jar" />
        			<pathelement location="${fop.dir}${file.separator}lib${file.separator}commons-io-1.3.1.jar" />
        			<pathelement location="${fop.dir}${file.separator}lib${file.separator}batik-all-1.7.jar" />
        			<pathelement location="${fop.dir}${file.separator}lib${file.separator}xmlgraphics-commons-1.4.jar" />
        			<pathelement location="${jai.dir}${file.separator}lib${file.separator}jai_core.jar" />
        			<pathelement location="${jai.dir}${file.separator}lib${file.separator}jai_codec.jar" />
        		
        			<pathelement location="${xalan.lib.dir}${file.separator}xalan.jar" />
        			<pathelement location="${xalan.lib.dir}${file.separator}xercesImpl.jar" />
        						
        		
        		</classpath>
        	</taskdef>
        	<fop 
        		format="application/pdf" 
        		fofile="@{source}" 
        		outfile="@{target}"
        		messagelevel="info"/>
        </sequential>
    </macrodef>

	<target name="init">
		<mkdir dir="${download.dir}"/>
		<mkdir dir="${build.dir}"/>
	</target>
	
	<target name="build-doc" depends="init, install-wikitext, get-docbook-xsl, get-fop">
		<echo>Building Output...</echo>
		<antcall target="wikitext2docbook"/>
		
		<antcall target="docbook2pdf"/>
		<antcall target="docbook2html"/>
		<!--
		<antcall target="wikitext2eclipsehelp"/>
		-->
		<antcall target="docbook2eclipsehelp"/>
	</target>
	
	
	
	<target name="check-docbook">
		<condition property="hasDocbook">
			<and>
				<!--
				<available file="${download.dir}${file.separator}docbook.zip" property="hasDocbookZip"/>
				-->
				<available file="${docbook.dir}" type="dir" property="hasDocbookDir"/>
			</and>
		</condition>
	</target>
	
	<target name="check-fop">
		<condition property="hasFOP">
			<and>
				<!--
				<available file="${download.dir}${file.separator}fop.zip" property="hasFOPZip"/>
				-->
				<available file="${fop.dir}" type="dir" property="hasFOPDir"/>
			</and>
		</condition>
	</target>
	
	<target name="check-xlan">
			<condition property="hasXlan">
				<and>
					<available file="${xalan.lib.dir}${file.separator}xalan.jar" property="hasXlanJar"/>
					<available file="${xalan.lib.dir}${file.separator}xercesImpl.jar" property="hasXercesImplJar"/>
				</and>
			</condition>
		</target>
		
	<target name="get-docbook-xsl" description="Downloads docbook xsl" depends="check-docbook" unless="hasDocbook">
		<echo>Downloading DocBook XSL...</echo>
		<get dest="${download.dir}${file.separator}docbook.zip" src="${docbookxsl.url}"/>
		<unzip src="${download.dir}${file.separator}docbook.zip" dest="${download.dir}"/>
	</target>
	
	<target name="get-fop" description="Downloads FOP" depends="check-fop" unless="hasFOP">
		<echo>Downloading FOP...</echo>
		<get dest="${download.dir}${file.separator}fop.zip" src="${fop.url}"/>
		<unzip src="${download.dir}${file.separator}fop.zip" dest="${download.dir}"/>
	</target>
	
	<target name="docbook2html">
		<echo>Converting documentation to HTML...</echo>
		<delete dir="${basedir}/html"
		        failonerror="false"
		        excludes="CVS" 
				includeemptydirs="true"/>
		
		<copy todir="${basedir}/html">
			<fileset dir="doc/">
    			<include name="images/**" />
			</fileset>
		</copy>
		<copy file="${html-css.file}" todir="${basedir}/html" />
		
		<xslt in="${build.dir}${file.separator}${document.name}.xml" 
			extension="xml" out="${basedir}/html${file.separator}${document.name}.html" 
			style="${document.stylesheet}">
			<classpath refid="xalan.class.path"/>
			<!--factory name="org.apache.xalan.processor.TransformerFactoryImpl">
				<attribute name="http://xml.apache.org/xalan/features/optimize" value="true"/>
			</factory-->
			<xmlcatalog>
				<entity 
					publicId="docbook.xsl"
					location="${docbook.dir}${file.separator}html${file.separator}docbook.xsl"/>
			</xmlcatalog>
			<param name="header.rule" expression="1" />
			<param name="admon.graphics.extension" expression=".gif"/>
			<param name="admon.textlabel" expression="0"/>
			<param name="ulink.target" expression="_new"/>
			<param name="ignore.image.scaling" expression="1"/>
		</xslt>
	</target>
	
	<target name="docbook2pdf">
		<echo>Converting documentation to PDF...</echo>
		<delete file="manual${file.separator}${document.name}.pdf" failonerror="false"/>
		<delete file="${build.dir}${file.separator}${document.name}.fo"/>
		<mkdir dir="manual"/>
		
		<!-- HACK! images should rather be copied to build/images -->
		<copy todir="${basedir}">
			<fileset dir="doc/">
				<include name="images/**" />
			</fileset>
		</copy>
		
		
		<xslt in="${build.dir}${file.separator}${document.name}.xml" extension="xml" 
			out="${build.dir}${file.separator}${document.name}.fo" 
			style="${document.pdf.stylesheet}">
			<param name="myDocName" expression="${document.footer.name}"/>
	        <classpath refid="xalan.class.path"/>
			
			<!--factory name="org.apache.xalan.processor.TransformerFactoryImpl">
				<attribute name="http://xml.apache.org/xalan/features/optimize" value="true"/>
			</factory-->
			<xmlcatalog>
				<entity 
					publicId="docbook.xsl"
					location="${docbook.dir}${file.separator}fo${file.separator}docbook.xsl"/>
			</xmlcatalog>
			<param name="generate.toc" expression="book toc" />
			<param name="show.comments" expression="0" />
			<param name="header.rule" expression="1" />
			<param name="admon.graphics.extension" expression=".gif"/>
			<param name="admon.textlabel" expression="0"/>
			<param name="admon.graphics" expression="1"/>
		</xslt>

		<docbook2pdf 
			source="${build.dir}${file.separator}${document.name}.fo"
			target="${document.pdf}"/>
		
		<!-- Remove the resulting formatting object. This object isn't necessary in the
		     result of this build. -->
		<delete file="${build.dir}${file.separator}${document.name}.fo" />
		<delete dir="${basedir}/images" />
	</target>
	
	<!-- ================================= 
          target: deploy-pdf          
         ================================= -->
    <target name="deploy-pdf"  description="description">
    	<copy todir="${deploy.dir}">
    				<fileset dir="manual/">
    					<include name="*.pdf" />
    				</fileset>
    	</copy>
    </target>

	
	<target name="wikitext2eclipsehelp" depends="assemble" description="Generate Eclipse Help from textile">
		<wikitext-to-eclipse-help markupLanguage="org.eclipse.xtext.wikitext.XtextTextileDialect"
			multipleOutputFiles="true"
			navigationImages="false"
			formatoutput="true"
			helpPrefix="help">
			<fileset dir="${build.dir}">
	 			<include name="${document.name}.textile"/>
			</fileset>
			<stylesheet url="book.css"/>
			<stylesheet file="${basedir}/help/styles/main.css"/>
		</wikitext-to-eclipse-help>
	 </target>
	
	<target name="docbook2eclipsehelp">
		<echo>Converting documentation to Eclipse Help...</echo>
		<delete dir="${basedir}/help"
		        failonerror="false"
		        excludes="CVS" 
				includeemptydirs="true"/>
		<copy todir="${basedir}/help/images">
			<fileset dir="doc/images">
				<include name="**/*" />
			</fileset>
		</copy>
		<copy file="${eclipsehelp-css.file}" todir="${basedir}/help" />
		
		<xslt basedir="${build.dir}" 
			  destdir="${basedir}" 
			  style="${document.eclipse.stylesheet}">
			<classpath refid="xalan.class.path"/>
			
			<include name="irouter.xml"/>
			<!--
			<factory name="org.apache.xalan.processor.TransformerFactoryImpl"/>
				
				<attribute name="http://xml.apache.org/xalan/features/optimize" value="true"/>
			</factory>
			-->
			<xmlcatalog>
				<entity 
					publicId="chunk.xsl"
					location="${docbook.dir}${file.separator}html${file.separator}chunk.xsl"/>
			</xmlcatalog>
			<param name="chunker.output.indent" expression="yes" />
			<param name="navig.showtitles" expression="1" />
			<param name="suppress.navigation" expression="0" />
			<param name="draft.mode" expression="yes" />
			<param name="chapter.autolabel" expression="1" />
			<param name="section.autolabel" expression="0" />
			<param name="chunk.section.depth" expression="3" />
			<param name="toc.section.depth" expression="5" />
			<param name="toc.list.type" expression="ul" />
			<param name="generate.toc" expression="book      toc,title
			chapter   toc,title
			section   title" />
			<!--
			
			
			
			<param name="chunk.quietly" expression="1"/>
			<param name="header.rule" expression="1" />
			<param name="ignore.image.scaling" 
				expression="1" />
			-->
		</xslt>
		<delete file="${basedir}/irouter.html" />
	</target>

	
	
</project>