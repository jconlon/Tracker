h1.  Tracker Information Router Reference

__Version 0.1.0__

__12/23/09__

{toc}

h2. Introduction

This version is based on an Intel based hardware "PC Engines Alix-1c":http://www.pcengines.ch/alix1c.htm  with 256MB, an internal 2GB Compact Flash drive, a Ubuntu 9.10 minimum command line system, OpenJDK JRE Headless  JVM, and a Felix Karaf OSGi framework.  

This system configuration is the current stable release.

h2. hardware

"PC Engines Alix-1c":http://www.pcengines.ch/alix1c.htm  with 256MB, an internal 2GB Compact Flash drive.

h2. OS

Ubuntu 9.10 minimum command line system


h3. Configuration

Steps to configuring the Sheeva Plug (OpenRD Client is similar) 
# Install a Ubuntu 9.10 minimum command line system
# Add a JRE
# Add the OSGi Framework
# Configure the framework as a OS Service, so it will come up and down when the system boots and shutsdown.

h3. User

* userName __jconlon__
** pw __Same as usual__
* userName __goethe__
** pw __nosoup4u__


h3. Versions after OS Install

After install the OS and distro Versions look like:

bc.. 
jconlon@tracker1:~$ cat /etc/issue
Ubuntu 9.10 \n \l

jconlon@tracker1:~$ cat /etc/debian_version
squeeze/sid
jconlon@tracker1:~$ uname -a
Linux tracker1 2.6.31-14-generic #48-Ubuntu SMP Fri Oct 16 14:04:26 UTC 2009 i586 GNU/Linux
jconlon@tracker1:~$ uname -r
2.6.31-14-generic

h3. Optimize Power - Up Time

"Ticket 461":http://tracker-project.verticon.com/verticon_Tracker/ticket/461
"See":https://help.ubuntu.com/community/Grub2

Edited /etc/default/grub and commented out @#GRUB_TIMEOUT=10@

Power up to Ping return time (headless) is ~25 seconds.
Sample times...
Power On						  : Tue Jan  5 10:57:40 CST 2010
Ping returned oka    	  : Tue Jan  5 10:58:05 CST 2010
Connection to a device  :Tue Jan  5 10:58:34 CST 2010

h2. Java Virtual Machine

h3. Install Java Runtime

Install OpenJDK JRE headless version.

bc.. 
sudo apt-get update openjdk-6-jre-headless

h3. Configuration

"See Ticket #467":http://tracker-project.verticon.com/verticon_Tracker/ticket/467

Changed the etc/karaf-wrapper.conf 

bc.. 
# Maximum Java Heap Size (in MB)
wrapper.java.maxmemory=512

change to: 
# Maximum Java Heap Size (in MB)
# wrapper.java.maxmemory=128

h2. Add and enable ssh server

bc.. 
jconlon@tracker1:sudo apt-get install openssh-server
jconlon@mudshark:~$ scp .ssh/id_dsa.pub jconlon@tracker1:.ssh/authorized_keys

h2. Set up IP

* Edit /etc/hosts
** add the hostname of the development machine to /etc/hosts
** add device servers

bc.. 
192.168.0.116	mudshark	dev
192.168.0.201	lantronix1
192.168.0.202	lantronix2

p. 

* configure a static IP address
** "HowTo":http://www.cyberciti.biz/tips/howto-ubuntu-linux-convert-dhcp-network-configuration-to-static-ip-configuration.html
** 192.168.0.204   tracker1

h2. File System

h3. Tumb drive

A thumb drive is used for log files and for software updates and configuration. The tumb drive will be the initial way for output data to be moved from the Tracker Router to a user machine and new/updated bundles to be moved to the Tracker Router from a user machine.

* Set up /etc/fstab for mounting of a thumb drive (tumbdrives typically use a vfat format) 
** with all user permissions 
*** "vfat permissions":http://ubuntuforums.org/showthread.php?t=605300
** see last line in cat below for the change

bc.. 
 	jconlon@tracker1:~$ cat /etc/fstab
# /etc/fstab: static file system information.
#
# Use 'blkid -o value -s UUID' to print the universally unique identifier
# for a device; this may be used with UUID= as a more robust way to name
# devices that works even if disks are added and removed. See fstab(5).
#
# <file system> <mount point>   <type>  <options>       <dump>  <pass>
proc            /proc           proc    defaults        0       0
# / was on /dev/sda1 during installation
UUID=4d4893ac-f711-48e0-a771-9843affb608a /               ext4    errors=remount-ro 0       1
# swap was on /dev/sda5 during installation
UUID=3cebb172-4a9e-4bf0-9608-4512691127be none            swap    sw              0       0
# usb device
/dev/sdb1       /mnt/USB       vfat users,defaults,umask=000 0 0 
 

jconlon@tracker1:~$ df -h
Filesystem            Size  Used Avail Use% Mounted on
/dev/sda1             1.8G  730M  957M  44% /
udev                  119M  184K  119M   1% /dev
none                  119M     0  119M   0% /dev/shm
none                  119M   32K  119M   1% /var/run
none                  119M     0  119M   0% /var/lock
none                  119M     0  119M   0% /lib/init/rw
/dev/sdb1             490M   32K  490M   1% /mnt/USB

p. 

h3. Set up directories on thumb drive

The tumbdrive will be the initial way for output data to be moved from the Tracker Router to a user machine and new/updated bundles to be moved to the Tracker Router from a user machine.

# Create directory for logging output called: **log**
# Create directory for deployment of Tracker bundles called: **deploy**

h2. OSGi Framework

"Felix Karaf":http://felix.apache.org/site/apache-felix-karaf.html is the selected OSGi framework and shell.

h3. Karaf Installation

**Karaf and the Tracker applications will be installed in a memory drive. Rebooting the machine will wipe it clean. Do not reboot until this entire step is completed or you will loose your work.**

* "Download Karaf":http://apache.securedservers.com/felix/apache-felix-karaf-1.2.0.tar.gz

bc.. 
jconlon@mudshark:~/Downloads/Felix$ scp apache-felix-karaf-1.2.0.tar.gz tracker1:/tmp
apache-felix-karaf-1.2.0.tar.gz                                          100% 4336KB   4.2MB/s   00:00 
p. 

* Install it to the memory drive as the jconlon user
bc.. 
jconlon@tracker1:/tmp$ tar xvf apache-felix-karaf-1.2.0.tar.gz -C /dev/shm
p. 

* Add the JAVA_HOME enviroment variable by adding the following line to the  bin/karaf script
JAVA_HOME="/usr/lib/jvm/java-6-openjdk"

bc.. 
jconlon@tracker1:/dev/shm/apache-felix-karaf-1.2.0/bin$ vi karaf


h4. Configure as an OS Service 

* Start karaf
bc.. 
jconlon@tracker1:/opt/felix/apache-felix-karaf-1.2.0$ bin/karaf
p. 

* Add the wrapper feature and install it
bc.. 
karaf@root> features:install wrapper
karaf@root> wrapper install
Command not found:  *:wrapper
karaf@root> wrapper:install 
Creating file: /dev/shm/apache-felix-karaf-1.2.0/bin/karaf-wrapper
Creating file: /dev/shm/apache-felix-karaf-1.2.0/bin/karaf-service
Creating file: /dev/shm/apache-felix-karaf-1.2.0/etc/karaf-wrapper.conf
Creating file: /dev/shm/apache-felix-karaf-1.2.0/lib/libwrapper.so
Creating file: /dev/shm/apache-felix-karaf-1.2.0/lib/karaf-wrapper.jar

Setup complete.  You may want to tweak the JVM properties in the wrapper configuration file:
	/dev/shm/apache-felix-karaf-1.2.0/etc/karaf-wrapper.conf
before installing and starting the service.

The way the service is installed depends upon your flavor of Linux.

On Redhat/Fedora/CentOS Systems:
  To install the service:
    $ ln -s /dev/shm/apache-felix-karaf-1.2.0/bin/karaf-service /etc/init.d/
    $ chkconfig karaf-service --add

  To start the service when the machine is rebooted:
    $ chkconfig karaf-service on

  To disable starting the service when the machine is rebooted:
    $ chkconfig karaf-service off

  To start the service:
    $ service karaf-service start

  To stop the service:
    $ service karaf-service stop

  To uninstall the service :
    $ chkconfig karaf-service --del
    $ rm /etc/init.d/karaf-service

On Ubuntu/Debian Systems:
  To install the service:
    $ ln -s /dev/shm/apache-felix-karaf-1.2.0/bin/karaf-service /etc/init.d/

  To start the service when the machine is rebooted:
    $ update-rc.d karaf-service defaults

  To disable starting the service when the machine is rebooted:
    $ update-rc.d -f karaf-service remove

  To start the service:
    $ /etc/init.d/karaf-service start

  To stop the service:
    $ /etc/init.d/karaf-service stop

  To uninstall the service :
    $ rm /etc/init.d/karaf-service
karaf@root> 

p. 

h3. Harden the Framework and the Tracker iRouter

"See Ticket #462":http://tracker-project.verticon.com/verticon_Tracker/ticket/462

Hardening the framework and the iRouter is conceived as running the framework and bundles out of the Ubuntu memory disk **/dev/shm**.  To do the framework filesystem will have to be persisted somewhere and extracted into the memory disk at startup.  

h4. Framework and iRouter app will be persisted to a tracker specific directory /opt/tracker

* create /opt/tracker directory
bc.. 
jconlon@tracker1:/opt$ sudo mkdir tracker
jconlon@tracker1:/opt$ cd tracker
jconlon@tracker1:/opt/tracker$ sudo chown jconlon .
p. 

h4. Modify karaf-service wrapper to do the extraction before the service starts

* See first part of scripts/karaf-service in this project.

h4. Move karaf-service and setup karaf-service

bc.. 
jconlon@mudshark:~/Workspaces/tracker_dev-01/com.verticon.tracker.irouter/scripts$ scp karaf-service tracker1:/opt/tracker

jconlon@tracker1:/opt/tracker$ sudo ln -s /opt/tracker/karaf-service /etc/init.d/
jconlon@tracker1:/opt/tracker$ sudo update-rc.d karaf-service defaults

h4. Move the pickle script to tracker directory

The pickle script will be used by administrators to archive any changed distro to a persistent compressed archive on the tracker diretory.  This is where the modified karaf-service will try and find it. 

*  add the irouter-pickle script to the tracker dirctory. 
bc.. 
jconlon@mudshark:~/Workspaces/tracker_dev-01/com.verticon.tracker.irouter/scripts$ scp irouter-pickle tracker1:/opt/tracker

h4. Archive the Framework and IRouter

* Here is how to run the pickle script
bc.. jconlon@tracker1:/opt/tracker$ ./irouter-pickle
 

h3. Add Dependencies

__TODO Consider refactoring these as a feature. For an example of a features repository see:__
"Felix Karaf Features file":http://repo2.maven.org/maven2/org/apache/felix/karaf/apache-felix-karaf/1.2.0/apache-felix-karaf-1.2.0-features.xml

h4. Add Dependent Bundles

__These bundles are added directly to the deploy directory and not just installed, to insure they are there in the file system, in case the data directory needs to be deleted due to a system hang.__

h5. Add WebConsole Feature

* Install the WebConsole
bc.. 
karaf@root> features:install webconsole
p. 

* Browse to the "WebConsole":http://tracker1:8181/system/console/admin

h6.  Brand the WebConsole __TODO__

"Webconsole branding":http://felix.apache.org/site/branding-the-web-console.html
 
h5. Add Tracker specific dependencies

# Install Declarative Services bundle
** org.apache.felix.scr-1.4.0.jar
# Add Equinox Support Bundles
** org.eclipse.osgi.services_3.2.0.v20090520-1800.jar
** org.eclipse.equinox.io_1.0.100.v20090520-1800.jar
** org.eclipse.equinox.util_1.0.100.v20090520-1800.jar
** org.eclipse.osgi.util_3.2.0.v20090520-1800.jar
** org.eclipse.equinox.wireadmin_1.0.100.v20090520-1800.jar
bc.. 
jconlon@mudshark:~/Downloads/Felix/tracker_deps$ ls
org.apache.felix.scr-1.4.0.jar                       org.eclipse.equinox.wireadmin_1.0.100.v20090520-1800.jar
org.eclipse.equinox.io_1.0.100.v20090520-1800.jar    org.eclipse.osgi.services_3.2.0.v20090520-1800.jar
org.eclipse.equinox.util_1.0.100.v20090520-1800.jar  org.eclipse.osgi.util_3.2.0.v20090520-1800.jar
 
jconlon@mudshark:~/Downloads/Felix/tracker_deps$ scp *.jar tracker1:/dev/shm/apache-felix-karaf-1.2.0/deploy

h3. Connecting to the framework

h4. Remote console

* SSH to a Remote console on the server
** SSH client to connect to the Karaf instance. The default port is 8101.

bc.. 
> ssh -p 8101 -l karaf ubuntuCLI
karaf@localhost's password: karaf
karaf@root:/>
p. 
** To exit the ssh session
bc.. 
  karaf@root:/> ~.
p. 

h4.  Karaf client

bc.. 
jconlon@mudshark:/opt/Felix/apache-felix-karaf-1.2.0$ java -jar lib/karaf-client.jar -h tracker1 -u karaf -p karaf
p. 
** To exit the client session __^D__

h4. Web client

"Web Console":http://tracker1:8181/system/console/admin


h3. Tracker IRouter

* Add Tracker Information Router bundles.
bc.. 
jconlon@mudshark:~/Workspaces/tracker_dev-01/com.verticon.tracker.router/deploy/plugins$ ls
com.verticon.tracker.connector.socket_0.1.0.jar            com.verticon.tracker.irouter.mettler_0.1.0.jar
com.verticon.tracker.irouter.abbott_0.1.0.jar              com.verticon.tracker.irouter.trutest_0.1.0.jar
com.verticon.tracker.irouter.measurement.logger_0.1.0.jar  com.verticon.tracker.irouter.wireadmin_0.1.0.jar
jconlon@mudshark:~/Workspaces/tracker_dev-01/com.verticon.tracker.router/deploy/plugins$ scp *.jar tracker1:/dev/shm/apache-felix-karaf-1.2.0/deploy


h3. Logging

h4. Guidelines on what iRouter components are logging

iRouter components adhere to the following logging policy. 

"See Ticket #466":http://tracker-project.verticon.com/verticon_Tracker/ticket/466

h5. c.v.tracker.irouter.abbott

* INFO policy:
** ComponentFactory will log the update and deletion of instances.

* DEBUG policy:
** CompositeConsumer will log wire connections and sending of data
** CommandProducer will log wire connections and sending of data, 
 
* WARN policy:
** CommandProducer send aborts when there are no wires.
 
* ERROR policy:
** Both Services will log unexpected 

h5. c.v.tracker.irouter.common

* DEBUG policy:
** TaskMonitoringService will log task submission, monitoring, and canceling
 
* WARN policy:

* ERROR policy:
** TaskMonitoringService will log task that have failed with an error or unexpected results

h5. c.v.tracker.irouter.mettler

* INFO policy:
** ComponentFactory will log the update and deletion of instances.

* DEBUG policy:
** MeasurementProducer will log wire connections and sending of data
** MeasurementProducerCallable will log device connections, data retrieval, and sending of data to the MeasurementProducer, 
 
* WARN policy:
** CommandProducer send aborts when there are no wires.
 
* ERROR policy:
** Both Services will log unexpected data and connection errors


h5. c.v.tracker.irouter.TruTest

* INFO policy:
** ComponentFactory will log the update and deletion of instances.

* DEBUG policy:
** CommandConsumer will log wire connections
** CommandConsumerCallable will log device connections, data retrieval, and sending of data to the device, 
** EnvelopeProducer will log wire connections and produced envelopes
** EnvelopeProducerCallable will log device connections, data retrieval, and sending of data to the EnvelopeProducer, 

* Log WARN policy:
** EnvelopeProducer will log send aborts when there are no wires.
 
* Log ERROR policy:
** Both Services will log unexpected data and connection errors



h5. c.v.tracker.irouter.wireadmin

* INFO policy:
** Component will log wireAdmin wire creation events.

* DEBUG policy:
** Component will log all wireAdmin events except wire creation and log the active creating and deleting of wires.
** GroupConnector will log all creating and deleting of wires.


h4. Configuration

* modified log4j properties file
** to save logging files to the thumbdrive
** to save a separate information file transaction.log file 

bc.. 
jconlon@mudshark:~/Workspaces/tracker_dev-01/com.verticon.tracker.irouter/propertyFiles$ scp tracker1:/dev/shm/apache-felix-karaf-1.2.0/etc/org.ops4j.pax.logging.cfg .
p. 




h3. Configuration Admin

Tracker iRouter is a configuration driven framework of software factories.  These software factories create __Producer__ and __Consumer__ Services which produce and consume __Measurement__, __Command__, and __State__ information.   

On the webconsole go to the Configuration tab and create Tracker Factory Configuations.  The initial beta user will create two instances for each iRouter ComponentFactory.
# Wiring group @one@ and Wiring group @two@

h4. Tracker Abbott Controller 

h5. Wiring Group __one__

Configuration for the Tracker Abbott Controller Instance __change the following attributes__
**Wiring group name** @one@

h5. Wiring Group __two__

Configuration for the Tracker Abbott Controller Instance __change the following attributes__
**Wiring group name** @two@


h4. Tracker Measurement Logger 

h5. Wiring Group __one__

Configuration for the Tracker Measurement Logger Instance __change the following attributes__
**Wiring group name** @one@
**Consumable measurement name** 
# @animal.weight@
# @mettler.weight@ 

h5. Wiring Group __two__

Configuration for the Tracker Measurement Logger Instance __change the following attributes__
**Wiring group name** @two@
**Consumable measurement name** 
# @animal.weight@
# @mettler.weight@ 

h4. Tracker Mettler Balance 

h5. Wiring Group __one__

Configuration for the Tracker Mettler Balance Instance __change the following attributes__

**Connection uri** @socket://lantronix1:10002
**Wiring group name** @one@

h5. Wiring Group __two__

Configuration for the Tracker Mettler Balance Instance __change the following attributes__
**Connection uri** @socket://lantronix2:10002
**Wiring group name** @two@

h4. Tracker TruTest Indicator

h5. Wiring Group __one__

Configuration for the Tracker TruTest Indicator Instance __change the following attributes__

**Connection uri** @socket://lantronix1:10001
**Wiring group name** @one@

h5. Wiring Group __two__

Configuration for the Tracker TruTest Indicator Instance __change the following attributes__
**Connection uri** @socket://lantronix2:10001
**Wiring group name** @two@


h3. **Save the work!**

* Run the pickle script
bc.. jconlon@tracker1:/opt/tracker$ ./irouter-pickle
 
h3. Diagnostics

Each Producer and Consumer Service will register a data flavor and scopes property with the framework.  These can be inspected in the Configuration Status browser page.

h2. Todo -----------------------------------------------------------


# TruTest 
## Load new Microcode
## Test beep code


