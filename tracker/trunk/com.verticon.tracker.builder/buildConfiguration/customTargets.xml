<project name="Build specific targets and properties" default="noDefault">

	<!-- ===================================================================== -->
	<!-- Run a given ${target} on all elements being built -->
	<!-- Add on <ant> task for each top level element being built. -->
	<!-- ===================================================================== -->
	<available property="allElementsFile" file="${builder}/allElements.xml" value="${builder}/allElements.xml"/>
	<property name="allElementsFile" location="${eclipse.pdebuild.templates}/headless-build/allElements.xml"/>

	<import file="${allElementsFile}" />
	<target name="allElements">
		<antcall target="allElementsDelegator" />
	</target>

	<!-- ===================================================================== -->
	<!-- ===================================================================== -->
	<target name="getBaseComponents" depends="checkLocalBase" unless="skipBase">
		<get src="${eclipseBaseURL}" dest="${buildDirectory}/../temp-base.zip" />
		<unzip dest="${base}" overwrite="true" src="${buildDirectory}/../temp-base.zip" />
	</target>

	<target name="checkLocalBase">
		<available file="${base}" property="skipBase" />
	</target>

	<!-- ===================================================================== -->
	<!-- Check out map files from correct repository -->
	<!-- Replace values for mapsCheckoutTag as desired. -->
	<!-- ===================================================================== -->
	<target name="getMapFiles" depends="checkLocalMaps" unless="skipMaps">
		<property name="mapsCheckoutTag" value="HEAD" />
		<cvs cvsRoot="${mapsRepo}" package="${mapsRoot}" dest="${buildDirectory}/maps" tag="${mapsCheckoutTag}" />
	</target>

	<target name="checkLocalMaps">
		<available property="skipMaps" file="${buildDirectory}/maps" />
	</target>

	<target name="tagMapFiles" if="tagMaps">
		<cvs dest="${buildDirectory}/maps/${mapsRoot}" command="tag ${mapsTagTag}" />
	</target>

	<!-- ===================================================================== -->

	<target name="clean" unless="noclean">
		<antcall target="allElements">
			<param name="target" value="cleanElement" />
		</antcall>
	</target>

	<target name="gatherLogs">
		<mkdir dir="${buildDirectory}/${buildLabel}/compilelogs" />
		<antcall target="allElements">
			<param name="target" value="gatherLogs" />
		</antcall>
		<unzip dest="${buildDirectory}/${buildLabel}/compilelogs" overwrite="true">
			<fileset dir="${buildDirectory}/features">
				<include name="**/*.log.zip" />
			</fileset>
		</unzip>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- Modified TEMPLATE -->
	<!-- ===================================================================== -->
	<target name="preSetup" depends="copyProjects">
		<antcall target="updateProductVersion">
		</antcall>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after setup but before starting the build proper -->
	<!-- ===================================================================== -->
	<target name="postSetup">
		<antcall target="getBaseComponents" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="postFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="preGenerate">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="postGenerate">
		<antcall target="clean" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="preProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="postProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running assemble. -->
	<!-- ===================================================================== -->
	<target name="preAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running assemble. -->
	<!-- ===================================================================== -->
	<target name="postAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running package. -->
	<!-- ===================================================================== -->
	<target name="prePackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running package. -->
	<!-- ===================================================================== -->
	<target name="postPackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the build is done. -->
	<!-- ===================================================================== -->
	<target name="postBuild">
		<antcall target="gatherLogs" />
		<antcall target="extract.p2.product.internal"/>
	</target>
	
	<!-- - - - - - - - - - - - - - - - - - 
	          target: extract.p2.product.internal                      
	         - - - - - - - - - - - - - - - - - -->
	    <target name="extract.p2.product.internal">
	    	<property file="${buildDirectory}/product.version"/> 
	    	<delete dir="${buildDirectory}/result" />
	    	<mkdir dir="${buildDirectory}/result/tmp" />
	    	<property name="root.ui" value="com.verticon.tracker.product.desktop.application"/>

	    			<antcall target="postBuild.linux" />
	    	
	    			<antcall target="postBuild.win" />
	    	
	    </target>

	<!-- ===================================================================== -->
	<!-- Steps to do to test the build results -->
	<!-- ===================================================================== -->
	<target name="test">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to publish the build results -->
	<!-- ===================================================================== -->
	<target name="publish">
	</target>

	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
		<echo message="You must specify a target when invoking this file" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: copyProjects  
          Custom                    
         - - - - - - - - - - - - - - - - - -->
	<target name="copyProjects">
		<tstamp/>
		<delete dir="${buildDirectory}" />
		<mkdir dir="${buildDirectory}" />

		<record name="${buildDirectory}/v${DSTAMP}${TSTAMP}-build.log"
	              loglevel="verbose" />
		<echoproperties />
		
		<mkdir dir="${buildDirectory}/features" />
		<copy todir="${buildDirectory}/features">
			<fileset dir="../../..">
				<include name="com.verticon.tracker.base.dep.feature/**" />
				<include name="com.verticon.tracker.product.desktop.feature/**" />
				<exclude name="*/bin/**" />
			</fileset>
		</copy>

		<mkdir dir="${buildDirectory}/plugins" />
		<copy todir="${buildDirectory}/plugins">
			<fileset dir="../../..">
				<include name="com.verticon.tracker.product.desktop/**" />
				<include name="com.verticon.tracker.product.desktop.doc/**" />
				<include name="com.verticon.tracker.doc/**" />
				<exclude name="*/bin/**" />
			</fileset>
		</copy>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: updateProductVersion                      
         - - - - - - - - - - - - - - - - - -->
	<target name="updateProductVersion">
		
		<property name="trackerVersion" 
			value="${tracker.product.version}.v${DSTAMP}${TSTAMP}"/>

		<replace file="${product}" token="0.0.0.qualifier" 
			value="${trackerVersion}" />
		
		<replace 
		    file="${buildDirectory}/plugins/com.verticon.tracker.product.desktop/about.mappings">
		  <replacefilter 
		    token="0.0.0" 
		    value="${tracker.product.version}"/>
		  <replacefilter 
			token="qualifier" 
			value="v${DSTAMP}${TSTAMP}"/>
		</replace>
		
		<delete file="${buildDirectory}/product.version" failonerror="false"/>
		<concat destfile="${buildDirectory}/product.version">trackerVersion=${trackerVersion}</concat>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: run.director                      
         - - - - - - - - - - - - - - - - - -->
	<target name="run.director">
		<!--
		<property name="eclipse.exec" value="${base}/eclipse/eclipse" />
		<property name="eclipse.exec" value="/home/jconlon/eclipse-target-platforms/eclipse-modeling-ganymede-SRI-incubation-02/eclipse/eclipse" /
		<echo> installUI = ${p2.IU}</echo>
		<echo> version = ${p2.version}</echo>
		<echo> file:${buildDirectory}/repo/</echo>
		-->

		<!-- 
		note 1: use the full path to the exe here, otherwise it seems to call the exe from the builder 
		note 2: So many problems creating a p2 capable product seem to be related to metadata in 
		the repo of the eclipse installation that a simple eclipse install is now used for the director
		just to keep the metadata clean.  If generation problems occur again, try deleting the installation
		and re extracting one from the tar.
		
		This property is now set in the build.properties file
		<property name="eclipse.exec" value="/opt/Eclipse/eclipse-java-ganymede-SR2/eclipse/eclipse"/>
		
		-->
				
		<exec executable="${eclipse.exec}" failonerror="false" timeout="900000">
			<arg line="-application org.eclipse.equinox.p2.director.app.application" />
			<arg line="-nosplash" />
			<arg line="--launcher.suppressErrors" />
			<arg line="-consoleLog" />
			<arg line="-flavor ${p2.flavor}" />
			<arg line="-installIU ${p2.IU}" />
			<arg line="-version ${p2.version}" />
			<arg line="-p2.os ${p2.os}" />
			<arg line="-p2.ws ${p2.ws}" />
			<arg line="-p2.arch ${p2.arch}" />
			<arg line="-roaming" />
			<arg line="-profile TrackerProfile" />
			<arg line="-profileProperties org.eclipse.update.install.features=true" />
			<arg line="-metadataRepository file:${buildDirectory}/repo/ " />
			<arg line="-artifactRepository file:${buildDirectory}/repo/" />
			<arg line="-destination ${p2.director.install.path}" />
			<arg line="-bundlepool ${p2.director.install.path}" />
			<arg line="-debug" />
			<arg line="-vmargs" />
			<arg line="-Declipse.p2.data.area=${p2.director.install.path}/p2" />
			
			
			<arg line="-Xmx512M"/>
			<arg line="-XX:PermSize=512M"/>
			<arg line="-XX:MaxPermSize=512m"/>
			<!-- 
	<arg line="-Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8888" />
			-->
		</exec>

		<!-- delete the metadata cache as well as the artifacts for unzipped bundles -->
		<delete failonerror="false" includeEmptyDirs="true" 
				dir="${p2.director.install.path}/p2/org.eclipse.equinox.p2.core/cache" />
	</target>


	
	<!-- - - - - - - - - - - - - - - - - - 
          target: postBuild.linux                      
         - - - - - - - - - - - - - - - - - -->
	<target name="postBuild.linux">
		<antcall target="run.director">
			<param name="p2.director.install.path" 
					value="${buildDirectory}/result/tmp/eclipse"/>
			<param name="p2.os" value="linux"/>
			<param name="p2.ws" value="gtk"/>
			<param name="p2.arch" value="x86"/>
			<param name="p2.IU" value="${root.ui}" />
			<param name="p2.version" value="${trackerVersion}"/>
		</antcall>
		
		<move file="${buildDirectory}/result/tmp/eclipse" 
			tofile="${buildDirectory}/result/tmp/tracker"/>
		
		<antcall target="add.repo.prefs"/>
		
		 <tar 
			destfile="${buildDirectory}/result/${buildId}-p2-RCP-linux-${trackerVersion}.tar">
		  <tarfileset dir="${buildDirectory}/result/tmp" mode="755">
		    <include name="tracker/tracker"/>
		  </tarfileset>
		  <tarfileset dir="${buildDirectory}/result/tmp">
			    <include name="tracker/**"/>
			    <exclude name="tracker/tracker"/>
		  </tarfileset>
		 
		</tar>
		
		<delete dir="${buildDirectory}/result/tmp" />
		
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
	          target: postBuild.win                      
	         - - - - - - - - - - - - - - - - - -->
	<target name="postBuild.win">
		
		<antcall target="run.director">
			<param name="p2.director.install.path" 
					value="${buildDirectory}/result/tmp/eclipse"/>
			<param name="p2.os" value="win32"/>
			<param name="p2.ws" value="win32"/>
			<param name="p2.arch" value="x86"/>
			<param name="p2.IU" value="${root.ui}" />
			<param name="p2.version" value="${trackerVersion}"/>
		</antcall>
		<move file="${buildDirectory}/result/tmp/eclipse" tofile="${buildDirectory}/result/tmp/tracker"/>
		<antcall target="add.repo.prefs"/>
		<zip 
			  destfile="${buildDirectory}/result/${buildId}-p2-RCP-win32-${trackerVersion}.zip" 
				basedir="${buildDirectory}/result/tmp" />
		<delete dir="${buildDirectory}/result/tmp" />
	</target>

   


	<!-- - - - - - - - - - - - - - - - - - 
          target: add.repo.prefs 
          This is a hack to add a set of preference data to limit the P2 update sites                     
         - - - - - - - - - - - - - - - - - -->
    <target name="add.repo.prefs">
    	
    	<loadproperties srcFile="${builder}/repo.properties"/>
    	
    	<property name="settingsDir" 
    		location="${buildDirectory}/result/tmp/tracker/configuration/.settings"/>
		<echoproperties></echoproperties>
		<mkdir dir="${settingsDir}"/>
		<copy todir="${settingsDir}">
			<fileset dir="${builder}">
				<include name="org.eclipse.equinox.p2.*.repository.prefs"/>
			</fileset>
		</copy>
    </target>
	
	<!-- ================================= 
          target: test.repo.perfs              
         ================================= -->
    <target name="test.repo.perfs"  description="description">
    	<property name="buildDirectory" 
    	    		location="${basedir}/../buildDirectory"/>
    	<property name="builder" 
    	    	    		location="${basedir}/../buildConfiguration"/>
    	<antcall target="add.repo.prefs"/>
    	<eclipse.refreshLocal 
    	    				resource="com.verticon.tracker.builder/buildDirectory/result"
    	    				depth="infinite"
    	    			/>
    </target>


	
	
	
</project>
