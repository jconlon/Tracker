<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../docbook-xml/docbookx.dtd" >
<chapter>
	<title>Querying for Information and Selecting Elements in Documents</title>
	<section>
		<title><acronym>OCL</acronym> Introduction</title>
		<para>
			The <firstterm>Object Constraint Language</firstterm>,
			<acronym>OCL</acronym>
			is a simple declarative language used within Tracker editors
			to interpret model documents for information or to query model 
			documents in order to select specific elements for further manipulation. 
		</para>
		
		<para>
			When using the <acronym>OCL</acronym> Interpreter or Query tools to interrogate
		    Tracker documents refer to: <xref linkend="ch02dataModel"/>.
		</para>
		
	</section>
	<section>
		<title>OCL Interpreter Examples</title>
		<para>
			The following are example
			<acronym>OCL</acronym>
			Interpreter rules that can be used for the querying Tracker
			documents. All examples use the Context Premises.

			<example>
				<title>
					Listing of animals and the number of events
					associated with each.
				</title>
				<programlisting>
animals.animal -> collect(
	a: Animal | Tuple {
		animal: Animal = a,
		numEvents: Integer = Event.allInstances()->select(ain=a.ain) ->size()
	}
)
  				</programlisting>
  			</example>
  			<example>
				<title>
					Listing of animals and the set of events associated with each.
				</title>
				<programlisting>
animals.animal -> collect(
	a: Animal | Tuple {
		ain: AnimalId = a.ain,
		events: Set(Event) = Event.allInstances()->select(ain=a.ain)
	}
)
  				</programlisting>
  			</example>
  			<example>
				<title>
					Listing of animalIds and the WeighIn events
					associated with each.  
				</title>
				<programlisting>
animals.animal -> collect(
	a: Animal | Tuple {
		ain: AnimalId = a.ain,
		weighIns: Set(WeighIn) = WeighIn.allInstances()->select(ain=a.ain)
	}
)
  				</programlisting>
  			</example>
  			<example>
				<title>
					Listing of animalIds and the Weights
					associated with each. 
				</title>
				<programlisting>
animals.animal -> collect(
	a: Animal | Tuple {
		ain: AnimalId = a.ain,
		weighIns: Set(Integer) = WeighIn.allInstances()->select(ain=a.ain)->collect(wi:WeighIn | wi.weight) ->asSet()
	}
)
  				</programlisting>
  			</example>
  			
  	
  	</para>
  </section>

</chapter>
