/*
* generated by Xtext
*/
package org.json.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.json.services.MongoQueryGrammarAccess;

public class MongoQueryParser extends AbstractContentAssistParser {
	
	@Inject
	private MongoQueryGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.json.ui.contentassist.antlr.internal.InternalMongoQueryParser createParser() {
		org.json.ui.contentassist.antlr.internal.InternalMongoQueryParser result = new org.json.ui.contentassist.antlr.internal.InternalMongoQueryParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
					put(grammarAccess.getKeyAccess().getAlternatives(), "rule__Key__Alternatives");
					put(grammarAccess.getConditionalAccess().getAlternatives(), "rule__Conditional__Alternatives");
					put(grammarAccess.getBooleanAccess().getAlternatives(), "rule__Boolean__Alternatives");
					put(grammarAccess.getJsonDateAccess().getAlternatives(), "rule__JsonDate__Alternatives");
					put(grammarAccess.getSelectorAccess().getGroup(), "rule__Selector__Group__0");
					put(grammarAccess.getSelectorAccess().getGroup_1(), "rule__Selector__Group_1__0");
					put(grammarAccess.getSelectionAccess().getGroup(), "rule__Selection__Group__0");
					put(grammarAccess.getSelectionAccess().getGroup_3(), "rule__Selection__Group_3__0");
					put(grammarAccess.getFieldSelectionAccess().getGroup(), "rule__FieldSelection__Group__0");
					put(grammarAccess.getQueryObjectAccess().getGroup(), "rule__QueryObject__Group__0");
					put(grammarAccess.getQueryObjectAccess().getGroup_3(), "rule__QueryObject__Group_3__0");
					put(grammarAccess.getMemberAccess().getGroup(), "rule__Member__Group__0");
					put(grammarAccess.getArrayAccess().getGroup(), "rule__Array__Group__0");
					put(grammarAccess.getArrayAccess().getGroup_3(), "rule__Array__Group_3__0");
					put(grammarAccess.getDateNowAccess().getGroup(), "rule__DateNow__Group__0");
					put(grammarAccess.getDateMilliAccess().getGroup(), "rule__DateMilli__Group__0");
					put(grammarAccess.getDateStringAccess().getGroup(), "rule__DateString__Group__0");
					put(grammarAccess.getDateFullAccess().getGroup(), "rule__DateFull__Group__0");
					put(grammarAccess.getDateFullAccess().getGroup_6(), "rule__DateFull__Group_6__0");
					put(grammarAccess.getSelectorAccess().getQueryAssignment_0(), "rule__Selector__QueryAssignment_0");
					put(grammarAccess.getSelectorAccess().getSelectionAssignment_1_1(), "rule__Selector__SelectionAssignment_1_1");
					put(grammarAccess.getSelectionAccess().getFieldsAssignment_2(), "rule__Selection__FieldsAssignment_2");
					put(grammarAccess.getSelectionAccess().getFieldsAssignment_3_1(), "rule__Selection__FieldsAssignment_3_1");
					put(grammarAccess.getFieldSelectionAccess().getKeyAssignment_0(), "rule__FieldSelection__KeyAssignment_0");
					put(grammarAccess.getFieldSelectionAccess().getEnabledAssignment_2(), "rule__FieldSelection__EnabledAssignment_2");
					put(grammarAccess.getQueryObjectAccess().getMembersAssignment_2(), "rule__QueryObject__MembersAssignment_2");
					put(grammarAccess.getQueryObjectAccess().getMembersAssignment_3_1(), "rule__QueryObject__MembersAssignment_3_1");
					put(grammarAccess.getMemberAccess().getKeyAssignment_0(), "rule__Member__KeyAssignment_0");
					put(grammarAccess.getMemberAccess().getValueAssignment_2(), "rule__Member__ValueAssignment_2");
					put(grammarAccess.getValueAccess().getStringValueAssignment_0(), "rule__Value__StringValueAssignment_0");
					put(grammarAccess.getValueAccess().getStringValueAssignment_1(), "rule__Value__StringValueAssignment_1");
					put(grammarAccess.getValueAccess().getStringValueAssignment_2(), "rule__Value__StringValueAssignment_2");
					put(grammarAccess.getValueAccess().getStringValueAssignment_3(), "rule__Value__StringValueAssignment_3");
					put(grammarAccess.getValueAccess().getNumberValueAssignment_4(), "rule__Value__NumberValueAssignment_4");
					put(grammarAccess.getValueAccess().getDateValueAssignment_5(), "rule__Value__DateValueAssignment_5");
					put(grammarAccess.getValueAccess().getArrayValueAssignment_6(), "rule__Value__ArrayValueAssignment_6");
					put(grammarAccess.getValueAccess().getIntegerValueAssignment_7(), "rule__Value__IntegerValueAssignment_7");
					put(grammarAccess.getValueAccess().getObjectValueAssignment_8(), "rule__Value__ObjectValueAssignment_8");
					put(grammarAccess.getArrayAccess().getValuesAssignment_2(), "rule__Array__ValuesAssignment_2");
					put(grammarAccess.getArrayAccess().getValuesAssignment_3_1(), "rule__Array__ValuesAssignment_3_1");
					put(grammarAccess.getDateMilliAccess().getMillisecondsAssignment_1(), "rule__DateMilli__MillisecondsAssignment_1");
					put(grammarAccess.getDateStringAccess().getDateStringAssignment_1(), "rule__DateString__DateStringAssignment_1");
					put(grammarAccess.getDateFullAccess().getYearAssignment_1(), "rule__DateFull__YearAssignment_1");
					put(grammarAccess.getDateFullAccess().getMonthAssignment_3(), "rule__DateFull__MonthAssignment_3");
					put(grammarAccess.getDateFullAccess().getDayAssignment_5(), "rule__DateFull__DayAssignment_5");
					put(grammarAccess.getDateFullAccess().getHourAssignment_6_1(), "rule__DateFull__HourAssignment_6_1");
					put(grammarAccess.getDateFullAccess().getMinuteAssignment_6_3(), "rule__DateFull__MinuteAssignment_6_3");
					put(grammarAccess.getDateFullAccess().getSecondAssignment_6_5(), "rule__DateFull__SecondAssignment_6_5");
					put(grammarAccess.getDateFullAccess().getMillisecondAssignment_6_7(), "rule__DateFull__MillisecondAssignment_6_7");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.json.ui.contentassist.antlr.internal.InternalMongoQueryParser typedParser = (org.json.ui.contentassist.antlr.internal.InternalMongoQueryParser) parser;
			typedParser.entryRuleSelector();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MongoQueryGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MongoQueryGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
