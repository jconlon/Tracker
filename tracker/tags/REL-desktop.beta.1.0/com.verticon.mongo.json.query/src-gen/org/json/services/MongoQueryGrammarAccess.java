/*
* generated by Xtext
*/

package org.json.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MongoQueryGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Selector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQueryAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQueryQueryObjectParserRuleCall_0_0 = (RuleCall)cQueryAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSelectionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSelectionSelectionParserRuleCall_1_1_0 = (RuleCall)cSelectionAssignment_1_1.eContents().get(0);
		
		//Selector:
		//	query=QueryObject ("," selection=Selection)?;
		public ParserRule getRule() { return rule; }

		//query=QueryObject ("," selection=Selection)?
		public Group getGroup() { return cGroup; }

		//query=QueryObject
		public Assignment getQueryAssignment_0() { return cQueryAssignment_0; }

		//QueryObject
		public RuleCall getQueryQueryObjectParserRuleCall_0_0() { return cQueryQueryObjectParserRuleCall_0_0; }

		//("," selection=Selection)?
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//selection=Selection
		public Assignment getSelectionAssignment_1_1() { return cSelectionAssignment_1_1; }

		//Selection
		public RuleCall getSelectionSelectionParserRuleCall_1_1_0() { return cSelectionSelectionParserRuleCall_1_1_0; }
	}

	public class SelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Selection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cSelectionAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cFieldsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldsFieldSelectionParserRuleCall_2_0 = (RuleCall)cFieldsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFieldsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFieldsFieldSelectionParserRuleCall_3_1_0 = (RuleCall)cFieldsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// **
		// * Selection
		// * / Selection:
		//	"{" {Selection} fields+=FieldSelection? ("," fields+=FieldSelection)* "}";
		public ParserRule getRule() { return rule; }

		//"{" {Selection} fields+=FieldSelection? ("," fields+=FieldSelection)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//{Selection}
		public Action getSelectionAction_1() { return cSelectionAction_1; }

		//fields+=FieldSelection?
		public Assignment getFieldsAssignment_2() { return cFieldsAssignment_2; }

		//FieldSelection
		public RuleCall getFieldsFieldSelectionParserRuleCall_2_0() { return cFieldsFieldSelectionParserRuleCall_2_0; }

		//("," fields+=FieldSelection)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//fields+=FieldSelection
		public Assignment getFieldsAssignment_3_1() { return cFieldsAssignment_3_1; }

		//FieldSelection
		public RuleCall getFieldsFieldSelectionParserRuleCall_3_1_0() { return cFieldsFieldSelectionParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class FieldSelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldSelection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeySTRINGTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEnabledAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEnabledINTTerminalRuleCall_2_0 = (RuleCall)cEnabledAssignment_2.eContents().get(0);
		
		//FieldSelection:
		//	key=STRING ":" enabled=INT;
		public ParserRule getRule() { return rule; }

		//key=STRING ":" enabled=INT
		public Group getGroup() { return cGroup; }

		//key=STRING
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_0_0() { return cKeySTRINGTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//enabled=INT
		public Assignment getEnabledAssignment_2() { return cEnabledAssignment_2; }

		//INT
		public RuleCall getEnabledINTTerminalRuleCall_2_0() { return cEnabledINTTerminalRuleCall_2_0; }
	}

	public class QueryObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QueryObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cQueryObjectAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cMembersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMembersMemberParserRuleCall_2_0 = (RuleCall)cMembersAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMembersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMembersMemberParserRuleCall_3_1_0 = (RuleCall)cMembersAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// **
		// * Queries
		// * / QueryObject returns Query:
		//	"{" {QueryObject} members+=Member? ("," members+=Member)* "}";
		public ParserRule getRule() { return rule; }

		//"{" {QueryObject} members+=Member? ("," members+=Member)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//{QueryObject}
		public Action getQueryObjectAction_1() { return cQueryObjectAction_1; }

		//members+=Member?
		public Assignment getMembersAssignment_2() { return cMembersAssignment_2; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_2_0() { return cMembersMemberParserRuleCall_2_0; }

		//("," members+=Member)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//members+=Member
		public Assignment getMembersAssignment_3_1() { return cMembersAssignment_3_1; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_3_1_0() { return cMembersMemberParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Member");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyKeyParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Member returns Query:
		//	key=Key ":" value=Value;
		public ParserRule getRule() { return rule; }

		//key=Key ":" value=Value
		public Group getGroup() { return cGroup; }

		//key=Key
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//Key
		public RuleCall getKeyKeyParserRuleCall_0_0() { return cKeyKeyParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStringValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStringValueNullParserRuleCall_0_0 = (RuleCall)cStringValueAssignment_0.eContents().get(0);
		private final Assignment cStringValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStringValueBooleanParserRuleCall_1_0 = (RuleCall)cStringValueAssignment_1.eContents().get(0);
		private final Assignment cStringValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStringValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cStringValueAssignment_2.eContents().get(0);
		private final Assignment cStringValueAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cStringValueIDTerminalRuleCall_3_0 = (RuleCall)cStringValueAssignment_3.eContents().get(0);
		private final Assignment cNumberValueAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cNumberValueNumberTerminalRuleCall_4_0 = (RuleCall)cNumberValueAssignment_4.eContents().get(0);
		private final Assignment cDateValueAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cDateValueJsonDateParserRuleCall_5_0 = (RuleCall)cDateValueAssignment_5.eContents().get(0);
		private final Assignment cArrayValueAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cArrayValueArrayParserRuleCall_6_0 = (RuleCall)cArrayValueAssignment_6.eContents().get(0);
		private final Assignment cIntegerValueAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cIntegerValueINTTerminalRuleCall_7_0 = (RuleCall)cIntegerValueAssignment_7.eContents().get(0);
		private final Assignment cObjectValueAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cObjectValueQueryObjectParserRuleCall_8_0 = (RuleCall)cObjectValueAssignment_8.eContents().get(0);
		
		//Value returns Query:
		//	stringValue=Null | stringValue=Boolean | stringValue=STRING | stringValue=ID | numberValue=Number | dateValue=JsonDate
		//	| arrayValue=Array | integerValue=INT | objectValue=QueryObject;
		public ParserRule getRule() { return rule; }

		//stringValue=Null | stringValue=Boolean | stringValue=STRING | stringValue=ID | numberValue=Number | dateValue=JsonDate |
		//arrayValue=Array | integerValue=INT | objectValue=QueryObject
		public Alternatives getAlternatives() { return cAlternatives; }

		//stringValue=Null
		public Assignment getStringValueAssignment_0() { return cStringValueAssignment_0; }

		//Null
		public RuleCall getStringValueNullParserRuleCall_0_0() { return cStringValueNullParserRuleCall_0_0; }

		//stringValue=Boolean
		public Assignment getStringValueAssignment_1() { return cStringValueAssignment_1; }

		//Boolean
		public RuleCall getStringValueBooleanParserRuleCall_1_0() { return cStringValueBooleanParserRuleCall_1_0; }

		//stringValue=STRING
		public Assignment getStringValueAssignment_2() { return cStringValueAssignment_2; }

		//STRING
		public RuleCall getStringValueSTRINGTerminalRuleCall_2_0() { return cStringValueSTRINGTerminalRuleCall_2_0; }

		//stringValue=ID
		public Assignment getStringValueAssignment_3() { return cStringValueAssignment_3; }

		//ID
		public RuleCall getStringValueIDTerminalRuleCall_3_0() { return cStringValueIDTerminalRuleCall_3_0; }

		//numberValue=Number
		public Assignment getNumberValueAssignment_4() { return cNumberValueAssignment_4; }

		//Number
		public RuleCall getNumberValueNumberTerminalRuleCall_4_0() { return cNumberValueNumberTerminalRuleCall_4_0; }

		//dateValue=JsonDate
		public Assignment getDateValueAssignment_5() { return cDateValueAssignment_5; }

		//JsonDate
		public RuleCall getDateValueJsonDateParserRuleCall_5_0() { return cDateValueJsonDateParserRuleCall_5_0; }

		//arrayValue=Array
		public Assignment getArrayValueAssignment_6() { return cArrayValueAssignment_6; }

		//Array
		public RuleCall getArrayValueArrayParserRuleCall_6_0() { return cArrayValueArrayParserRuleCall_6_0; }

		//integerValue=INT
		public Assignment getIntegerValueAssignment_7() { return cIntegerValueAssignment_7; }

		//INT
		public RuleCall getIntegerValueINTTerminalRuleCall_7_0() { return cIntegerValueINTTerminalRuleCall_7_0; }

		//objectValue=QueryObject
		public Assignment getObjectValueAssignment_8() { return cObjectValueAssignment_8; }

		//QueryObject
		public RuleCall getObjectValueQueryObjectParserRuleCall_8_0() { return cObjectValueQueryObjectParserRuleCall_8_0; }
	}

	public class ArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Array");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesValueParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuesValueParserRuleCall_3_1_0 = (RuleCall)cValuesAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Array:
		//	{Array} "[" values+=Value? ("," values+=Value)* "]";
		public ParserRule getRule() { return rule; }

		//{Array} "[" values+=Value? ("," values+=Value)* "]"
		public Group getGroup() { return cGroup; }

		//{Array}
		public Action getArrayAction_0() { return cArrayAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//values+=Value?
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }

		//Value
		public RuleCall getValuesValueParserRuleCall_2_0() { return cValuesValueParserRuleCall_2_0; }

		//("," values+=Value)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//values+=Value
		public Assignment getValuesAssignment_3_1() { return cValuesAssignment_3_1; }

		//Value
		public RuleCall getValuesValueParserRuleCall_3_1_0() { return cValuesValueParserRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class KeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Key");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConditionalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Key:
		//	Conditional | ID | STRING;
		public ParserRule getRule() { return rule; }

		//Conditional | ID | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//Conditional
		public RuleCall getConditionalParserRuleCall_0() { return cConditionalParserRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
	}

	public class ConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Conditional");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLtKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGtKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGteKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLteKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cAllKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cExistsKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cModKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cNeKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cInKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cNinKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cNotKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cOrKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cAndKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cSizeKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cTypeKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cNearKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cMaxDistanceKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		
		//Conditional returns ecore::EString:
		//	"$lt" | "$gt" | "$gte" | "$lte" | "$all" | "$exists" | "$mod" | "$ne" | "$in" | "$nin" | "$not" | "$or" | "$and" |
		//	"$size" | "$type" | "$near" | "$maxDistance";
		public ParserRule getRule() { return rule; }

		//"$lt" | "$gt" | "$gte" | "$lte" | "$all" | "$exists" | "$mod" | "$ne" | "$in" | "$nin" | "$not" | "$or" | "$and" |
		//"$size" | "$type" | "$near" | "$maxDistance"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"$lt"
		public Keyword getLtKeyword_0() { return cLtKeyword_0; }

		//"$gt"
		public Keyword getGtKeyword_1() { return cGtKeyword_1; }

		//"$gte"
		public Keyword getGteKeyword_2() { return cGteKeyword_2; }

		//"$lte"
		public Keyword getLteKeyword_3() { return cLteKeyword_3; }

		//"$all"
		public Keyword getAllKeyword_4() { return cAllKeyword_4; }

		//"$exists"
		public Keyword getExistsKeyword_5() { return cExistsKeyword_5; }

		//"$mod"
		public Keyword getModKeyword_6() { return cModKeyword_6; }

		//"$ne"
		public Keyword getNeKeyword_7() { return cNeKeyword_7; }

		//"$in"
		public Keyword getInKeyword_8() { return cInKeyword_8; }

		//"$nin"
		public Keyword getNinKeyword_9() { return cNinKeyword_9; }

		//"$not"
		public Keyword getNotKeyword_10() { return cNotKeyword_10; }

		//"$or"
		public Keyword getOrKeyword_11() { return cOrKeyword_11; }

		//"$and"
		public Keyword getAndKeyword_12() { return cAndKeyword_12; }

		//"$size"
		public Keyword getSizeKeyword_13() { return cSizeKeyword_13; }

		//"$type"
		public Keyword getTypeKeyword_14() { return cTypeKeyword_14; }

		//"$near"
		public Keyword getNearKeyword_15() { return cNearKeyword_15; }

		//"$maxDistance"
		public Keyword getMaxDistanceKeyword_16() { return cMaxDistanceKeyword_16; }
	}

	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Boolean returns ecore::EString:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class NullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Null");
		private final Keyword cNullKeyword = (Keyword)rule.eContents().get(1);
		
		//Null returns ecore::EString:
		//	"null";
		public ParserRule getRule() { return rule; }

		//"null"
		public Keyword getNullKeyword() { return cNullKeyword; }
	}

	public class JsonDateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JsonDate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDateNowParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDateMilliParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDateStringParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDateFullParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		/// *
		// *     new Date()  
		//    new Date(milliseconds)  
		//    new Date(dateString)  
		//    new Date(year, month, day [, hour, minute, second, millisecond ])  
		// * / JsonDate:
		//	DateNow | DateMilli | DateString | DateFull;
		public ParserRule getRule() { return rule; }

		//DateNow | DateMilli | DateString | DateFull
		public Alternatives getAlternatives() { return cAlternatives; }

		//DateNow
		public RuleCall getDateNowParserRuleCall_0() { return cDateNowParserRuleCall_0; }

		//DateMilli
		public RuleCall getDateMilliParserRuleCall_1() { return cDateMilliParserRuleCall_1; }

		//DateString
		public RuleCall getDateStringParserRuleCall_2() { return cDateStringParserRuleCall_2; }

		//DateFull
		public RuleCall getDateFullParserRuleCall_3() { return cDateFullParserRuleCall_3; }
	}

	public class DateNowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DateNow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJsonDateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNewDateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DateNow returns JsonDate:
		//	{JsonDate} "new Date()";
		public ParserRule getRule() { return rule; }

		//{JsonDate} "new Date()"
		public Group getGroup() { return cGroup; }

		//{JsonDate}
		public Action getJsonDateAction_0() { return cJsonDateAction_0; }

		//"new Date()"
		public Keyword getNewDateKeyword_1() { return cNewDateKeyword_1; }
	}

	public class DateMilliElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DateMilli");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewDateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMillisecondsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMillisecondsINTTerminalRuleCall_1_0 = (RuleCall)cMillisecondsAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DateMilli returns JsonDate:
		//	"new Date(" milliseconds=INT ")";
		public ParserRule getRule() { return rule; }

		//"new Date(" milliseconds=INT ")"
		public Group getGroup() { return cGroup; }

		//"new Date("
		public Keyword getNewDateKeyword_0() { return cNewDateKeyword_0; }

		//milliseconds=INT
		public Assignment getMillisecondsAssignment_1() { return cMillisecondsAssignment_1; }

		//INT
		public RuleCall getMillisecondsINTTerminalRuleCall_1_0() { return cMillisecondsINTTerminalRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class DateStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DateString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewDateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDateStringAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDateStringSTRINGTerminalRuleCall_1_0 = (RuleCall)cDateStringAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DateString returns JsonDate:
		//	"new Date(" dateString=STRING ")";
		public ParserRule getRule() { return rule; }

		//"new Date(" dateString=STRING ")"
		public Group getGroup() { return cGroup; }

		//"new Date("
		public Keyword getNewDateKeyword_0() { return cNewDateKeyword_0; }

		//dateString=STRING
		public Assignment getDateStringAssignment_1() { return cDateStringAssignment_1; }

		//STRING
		public RuleCall getDateStringSTRINGTerminalRuleCall_1_0() { return cDateStringSTRINGTerminalRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class DateFullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DateFull");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewDateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cYearAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cYearINTTerminalRuleCall_1_0 = (RuleCall)cYearAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMonthAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMonthINTTerminalRuleCall_3_0 = (RuleCall)cMonthAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDayAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDayINTTerminalRuleCall_5_0 = (RuleCall)cDayAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cHourAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cHourINTTerminalRuleCall_6_1_0 = (RuleCall)cHourAssignment_6_1.eContents().get(0);
		private final Keyword cCommaKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cMinuteAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cMinuteINTTerminalRuleCall_6_3_0 = (RuleCall)cMinuteAssignment_6_3.eContents().get(0);
		private final Keyword cCommaKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Assignment cSecondAssignment_6_5 = (Assignment)cGroup_6.eContents().get(5);
		private final RuleCall cSecondINTTerminalRuleCall_6_5_0 = (RuleCall)cSecondAssignment_6_5.eContents().get(0);
		private final Keyword cCommaKeyword_6_6 = (Keyword)cGroup_6.eContents().get(6);
		private final Assignment cMillisecondAssignment_6_7 = (Assignment)cGroup_6.eContents().get(7);
		private final RuleCall cMillisecondINTTerminalRuleCall_6_7_0 = (RuleCall)cMillisecondAssignment_6_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//DateFull returns JsonDate:
		//	"new Date(" year=INT "," month=INT "," day=INT ("," hour=INT "," minute=INT "," second=INT "," millisecond=INT)? ")";
		public ParserRule getRule() { return rule; }

		//"new Date(" year=INT "," month=INT "," day=INT ("," hour=INT "," minute=INT "," second=INT "," millisecond=INT)? ")"
		public Group getGroup() { return cGroup; }

		//"new Date("
		public Keyword getNewDateKeyword_0() { return cNewDateKeyword_0; }

		//year=INT
		public Assignment getYearAssignment_1() { return cYearAssignment_1; }

		//INT
		public RuleCall getYearINTTerminalRuleCall_1_0() { return cYearINTTerminalRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//month=INT
		public Assignment getMonthAssignment_3() { return cMonthAssignment_3; }

		//INT
		public RuleCall getMonthINTTerminalRuleCall_3_0() { return cMonthINTTerminalRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//day=INT
		public Assignment getDayAssignment_5() { return cDayAssignment_5; }

		//INT
		public RuleCall getDayINTTerminalRuleCall_5_0() { return cDayINTTerminalRuleCall_5_0; }

		//("," hour=INT "," minute=INT "," second=INT "," millisecond=INT)?
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//hour=INT
		public Assignment getHourAssignment_6_1() { return cHourAssignment_6_1; }

		//INT
		public RuleCall getHourINTTerminalRuleCall_6_1_0() { return cHourINTTerminalRuleCall_6_1_0; }

		//","
		public Keyword getCommaKeyword_6_2() { return cCommaKeyword_6_2; }

		//minute=INT
		public Assignment getMinuteAssignment_6_3() { return cMinuteAssignment_6_3; }

		//INT
		public RuleCall getMinuteINTTerminalRuleCall_6_3_0() { return cMinuteINTTerminalRuleCall_6_3_0; }

		//","
		public Keyword getCommaKeyword_6_4() { return cCommaKeyword_6_4; }

		//second=INT
		public Assignment getSecondAssignment_6_5() { return cSecondAssignment_6_5; }

		//INT
		public RuleCall getSecondINTTerminalRuleCall_6_5_0() { return cSecondINTTerminalRuleCall_6_5_0; }

		//","
		public Keyword getCommaKeyword_6_6() { return cCommaKeyword_6_6; }

		//millisecond=INT
		public Assignment getMillisecondAssignment_6_7() { return cMillisecondAssignment_6_7; }

		//INT
		public RuleCall getMillisecondINTTerminalRuleCall_6_7_0() { return cMillisecondINTTerminalRuleCall_6_7_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	
	
	private SelectorElements pSelector;
	private SelectionElements pSelection;
	private FieldSelectionElements pFieldSelection;
	private QueryObjectElements pQueryObject;
	private MemberElements pMember;
	private ValueElements pValue;
	private ArrayElements pArray;
	private KeyElements pKey;
	private ConditionalElements pConditional;
	private BooleanElements pBoolean;
	private NullElements pNull;
	private JsonDateElements pJsonDate;
	private DateNowElements pDateNow;
	private DateMilliElements pDateMilli;
	private DateStringElements pDateString;
	private DateFullElements pDateFull;
	private TerminalRule tNumber;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MongoQueryGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Selector:
	//	query=QueryObject ("," selection=Selection)?;
	public SelectorElements getSelectorAccess() {
		return (pSelector != null) ? pSelector : (pSelector = new SelectorElements());
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}

	/// **
	// * Selection
	// * / Selection:
	//	"{" {Selection} fields+=FieldSelection? ("," fields+=FieldSelection)* "}";
	public SelectionElements getSelectionAccess() {
		return (pSelection != null) ? pSelection : (pSelection = new SelectionElements());
	}
	
	public ParserRule getSelectionRule() {
		return getSelectionAccess().getRule();
	}

	//FieldSelection:
	//	key=STRING ":" enabled=INT;
	public FieldSelectionElements getFieldSelectionAccess() {
		return (pFieldSelection != null) ? pFieldSelection : (pFieldSelection = new FieldSelectionElements());
	}
	
	public ParserRule getFieldSelectionRule() {
		return getFieldSelectionAccess().getRule();
	}

	/// **
	// * Queries
	// * / QueryObject returns Query:
	//	"{" {QueryObject} members+=Member? ("," members+=Member)* "}";
	public QueryObjectElements getQueryObjectAccess() {
		return (pQueryObject != null) ? pQueryObject : (pQueryObject = new QueryObjectElements());
	}
	
	public ParserRule getQueryObjectRule() {
		return getQueryObjectAccess().getRule();
	}

	//Member returns Query:
	//	key=Key ":" value=Value;
	public MemberElements getMemberAccess() {
		return (pMember != null) ? pMember : (pMember = new MemberElements());
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}

	//Value returns Query:
	//	stringValue=Null | stringValue=Boolean | stringValue=STRING | stringValue=ID | numberValue=Number | dateValue=JsonDate
	//	| arrayValue=Array | integerValue=INT | objectValue=QueryObject;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//Array:
	//	{Array} "[" values+=Value? ("," values+=Value)* "]";
	public ArrayElements getArrayAccess() {
		return (pArray != null) ? pArray : (pArray = new ArrayElements());
	}
	
	public ParserRule getArrayRule() {
		return getArrayAccess().getRule();
	}

	//Key:
	//	Conditional | ID | STRING;
	public KeyElements getKeyAccess() {
		return (pKey != null) ? pKey : (pKey = new KeyElements());
	}
	
	public ParserRule getKeyRule() {
		return getKeyAccess().getRule();
	}

	//Conditional returns ecore::EString:
	//	"$lt" | "$gt" | "$gte" | "$lte" | "$all" | "$exists" | "$mod" | "$ne" | "$in" | "$nin" | "$not" | "$or" | "$and" |
	//	"$size" | "$type" | "$near" | "$maxDistance";
	public ConditionalElements getConditionalAccess() {
		return (pConditional != null) ? pConditional : (pConditional = new ConditionalElements());
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}

	//Boolean returns ecore::EString:
	//	"true" | "false";
	public BooleanElements getBooleanAccess() {
		return (pBoolean != null) ? pBoolean : (pBoolean = new BooleanElements());
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}

	//Null returns ecore::EString:
	//	"null";
	public NullElements getNullAccess() {
		return (pNull != null) ? pNull : (pNull = new NullElements());
	}
	
	public ParserRule getNullRule() {
		return getNullAccess().getRule();
	}

	/// *
	// *     new Date()  
	//    new Date(milliseconds)  
	//    new Date(dateString)  
	//    new Date(year, month, day [, hour, minute, second, millisecond ])  
	// * / JsonDate:
	//	DateNow | DateMilli | DateString | DateFull;
	public JsonDateElements getJsonDateAccess() {
		return (pJsonDate != null) ? pJsonDate : (pJsonDate = new JsonDateElements());
	}
	
	public ParserRule getJsonDateRule() {
		return getJsonDateAccess().getRule();
	}

	//DateNow returns JsonDate:
	//	{JsonDate} "new Date()";
	public DateNowElements getDateNowAccess() {
		return (pDateNow != null) ? pDateNow : (pDateNow = new DateNowElements());
	}
	
	public ParserRule getDateNowRule() {
		return getDateNowAccess().getRule();
	}

	//DateMilli returns JsonDate:
	//	"new Date(" milliseconds=INT ")";
	public DateMilliElements getDateMilliAccess() {
		return (pDateMilli != null) ? pDateMilli : (pDateMilli = new DateMilliElements());
	}
	
	public ParserRule getDateMilliRule() {
		return getDateMilliAccess().getRule();
	}

	//DateString returns JsonDate:
	//	"new Date(" dateString=STRING ")";
	public DateStringElements getDateStringAccess() {
		return (pDateString != null) ? pDateString : (pDateString = new DateStringElements());
	}
	
	public ParserRule getDateStringRule() {
		return getDateStringAccess().getRule();
	}

	//DateFull returns JsonDate:
	//	"new Date(" year=INT "," month=INT "," day=INT ("," hour=INT "," minute=INT "," second=INT "," millisecond=INT)? ")";
	public DateFullElements getDateFullAccess() {
		return (pDateFull != null) ? pDateFull : (pDateFull = new DateFullElements());
	}
	
	public ParserRule getDateFullRule() {
		return getDateFullAccess().getRule();
	}

	//terminal Number returns ecore::EDouble:
	//	"-"? INT? "." INT (("E" | "e") "-"? INT)?;
	public TerminalRule getNumberRule() {
		return (tNumber != null) ? tNumber : (tNumber = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "Number"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
