/*
* generated by Xtext
*/
grammar InternalMongoQuery;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.json.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.json.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.json.services.MongoQueryGrammarAccess;

}

@parser::members {

 	private MongoQueryGrammarAccess grammarAccess;
 	
    public InternalMongoQueryParser(TokenStream input, MongoQueryGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Selector";	
   	}
   	
   	@Override
   	protected MongoQueryGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSelector
entryRuleSelector returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelectorRule()); }
	 iv_ruleSelector=ruleSelector 
	 { $current=$iv_ruleSelector.current; } 
	 EOF 
;

// Rule Selector
ruleSelector returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSelectorAccess().getQueryQueryObjectParserRuleCall_0_0()); 
	    }
		lv_query_0_0=ruleQueryObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectorRule());
	        }
       		set(
       			$current, 
       			"query",
        		lv_query_0_0, 
        		"QueryObject");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSelectorAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectorAccess().getSelectionSelectionParserRuleCall_1_1_0()); 
	    }
		lv_selection_2_0=ruleSelection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectorRule());
	        }
       		set(
       			$current, 
       			"selection",
        		lv_selection_2_0, 
        		"Selection");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleSelection
entryRuleSelection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelectionRule()); }
	 iv_ruleSelection=ruleSelection 
	 { $current=$iv_ruleSelection.current; } 
	 EOF 
;

// Rule Selection
ruleSelection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSelectionAccess().getLeftCurlyBracketKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getSelectionAccess().getSelectionAction_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectionAccess().getFieldsFieldSelectionParserRuleCall_2_0()); 
	    }
		lv_fields_2_0=ruleFieldSelection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectionRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_2_0, 
        		"FieldSelection");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSelectionAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectionAccess().getFieldsFieldSelectionParserRuleCall_3_1_0()); 
	    }
		lv_fields_4_0=ruleFieldSelection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectionRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_4_0, 
        		"FieldSelection");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSelectionAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleFieldSelection
entryRuleFieldSelection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldSelectionRule()); }
	 iv_ruleFieldSelection=ruleFieldSelection 
	 { $current=$iv_ruleFieldSelection.current; } 
	 EOF 
;

// Rule FieldSelection
ruleFieldSelection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_key_0_0=RULE_STRING
		{
			newLeafNode(lv_key_0_0, grammarAccess.getFieldSelectionAccess().getKeySTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldSelectionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"STRING");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFieldSelectionAccess().getColonKeyword_1());
    }
(
(
		lv_enabled_2_0=RULE_INT
		{
			newLeafNode(lv_enabled_2_0, grammarAccess.getFieldSelectionAccess().getEnabledINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldSelectionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"enabled",
        		lv_enabled_2_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleQueryObject
entryRuleQueryObject returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQueryObjectRule()); }
	 iv_ruleQueryObject=ruleQueryObject 
	 { $current=$iv_ruleQueryObject.current; } 
	 EOF 
;

// Rule QueryObject
ruleQueryObject returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getQueryObjectAccess().getLeftCurlyBracketKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getQueryObjectAccess().getQueryObjectAction_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getQueryObjectAccess().getMembersMemberParserRuleCall_2_0()); 
	    }
		lv_members_2_0=ruleMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQueryObjectRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_2_0, 
        		"Member");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getQueryObjectAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQueryObjectAccess().getMembersMemberParserRuleCall_3_1_0()); 
	    }
		lv_members_4_0=ruleMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQueryObjectRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_4_0, 
        		"Member");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getQueryObjectAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleMember
entryRuleMember returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMemberRule()); }
	 iv_ruleMember=ruleMember 
	 { $current=$iv_ruleMember.current; } 
	 EOF 
;

// Rule Member
ruleMember returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMemberAccess().getKeyKeyParserRuleCall_0_0()); 
	    }
		lv_key_0_0=ruleKey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberRule());
	        }
       		set(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"Key");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMemberAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMemberAccess().getValueValueParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current; } 
	 EOF 
;

// Rule Value
ruleValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getValueAccess().getStringValueNullParserRuleCall_0_0()); 
	    }
		lv_stringValue_0_0=ruleNull		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueRule());
	        }
       		set(
       			$current, 
       			"stringValue",
        		lv_stringValue_0_0, 
        		"Null");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getValueAccess().getStringValueBooleanParserRuleCall_1_0()); 
	    }
		lv_stringValue_1_0=ruleBoolean		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueRule());
	        }
       		set(
       			$current, 
       			"stringValue",
        		lv_stringValue_1_0, 
        		"Boolean");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_stringValue_2_0=RULE_STRING
		{
			newLeafNode(lv_stringValue_2_0, grammarAccess.getValueAccess().getStringValueSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"stringValue",
        		lv_stringValue_2_0, 
        		"STRING");
	    }

)
)
    |(
(
		lv_stringValue_3_0=RULE_ID
		{
			newLeafNode(lv_stringValue_3_0, grammarAccess.getValueAccess().getStringValueIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"stringValue",
        		lv_stringValue_3_0, 
        		"ID");
	    }

)
)
    |(
(
		lv_numberValue_4_0=RULE_NUMBER
		{
			newLeafNode(lv_numberValue_4_0, grammarAccess.getValueAccess().getNumberValueNumberTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"numberValue",
        		lv_numberValue_4_0, 
        		"Number");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getValueAccess().getDateValueJsonDateParserRuleCall_5_0()); 
	    }
		lv_dateValue_5_0=ruleJsonDate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueRule());
	        }
       		set(
       			$current, 
       			"dateValue",
        		lv_dateValue_5_0, 
        		"JsonDate");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getValueAccess().getArrayValueArrayParserRuleCall_6_0()); 
	    }
		lv_arrayValue_6_0=ruleArray		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueRule());
	        }
       		set(
       			$current, 
       			"arrayValue",
        		lv_arrayValue_6_0, 
        		"Array");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_integerValue_7_0=RULE_INT
		{
			newLeafNode(lv_integerValue_7_0, grammarAccess.getValueAccess().getIntegerValueINTTerminalRuleCall_7_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"integerValue",
        		lv_integerValue_7_0, 
        		"INT");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getValueAccess().getObjectValueQueryObjectParserRuleCall_8_0()); 
	    }
		lv_objectValue_8_0=ruleQueryObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueRule());
	        }
       		set(
       			$current, 
       			"objectValue",
        		lv_objectValue_8_0, 
        		"QueryObject");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleArray
entryRuleArray returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayRule()); }
	 iv_ruleArray=ruleArray 
	 { $current=$iv_ruleArray.current; } 
	 EOF 
;

// Rule Array
ruleArray returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getArrayAccess().getArrayAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArrayAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayAccess().getValuesValueParserRuleCall_2_0()); 
	    }
		lv_values_2_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_2_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrayAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayAccess().getValuesValueParserRuleCall_3_1_0()); 
	    }
		lv_values_4_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_4_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getArrayAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleKey
entryRuleKey returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeyRule()); } 
	 iv_ruleKey=ruleKey 
	 { $current=$iv_ruleKey.current.getText(); }  
	 EOF 
;

// Rule Key
ruleKey returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getKeyAccess().getConditionalParserRuleCall_0()); 
    }
    this_Conditional_0=ruleConditional    {
		$current.merge(this_Conditional_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getKeyAccess().getIDTerminalRuleCall_1()); 
    }

    |    this_STRING_2=RULE_STRING    {
		$current.merge(this_STRING_2);
    }

    { 
    newLeafNode(this_STRING_2, grammarAccess.getKeyAccess().getSTRINGTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleConditional
entryRuleConditional returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalRule()); } 
	 iv_ruleConditional=ruleConditional 
	 { $current=$iv_ruleConditional.current.getText(); }  
	 EOF 
;

// Rule Conditional
ruleConditional returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='$lt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConditionalAccess().getLtKeyword_0()); 
    }

    |
	kw='$gt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConditionalAccess().getGtKeyword_1()); 
    }

    |
	kw='$gte' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConditionalAccess().getGteKeyword_2()); 
    }

    |
	kw='$lte' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConditionalAccess().getLteKeyword_3()); 
    }

    |
	kw='$all' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConditionalAccess().getAllKeyword_4()); 
    }

    |
	kw='$exists' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConditionalAccess().getExistsKeyword_5()); 
    }

    |
	kw='$mod' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConditionalAccess().getModKeyword_6()); 
    }

    |
	kw='$ne' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConditionalAccess().getNeKeyword_7()); 
    }

    |
	kw='$in' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConditionalAccess().getInKeyword_8()); 
    }

    |
	kw='$nin' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConditionalAccess().getNinKeyword_9()); 
    }

    |
	kw='$not' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConditionalAccess().getNotKeyword_10()); 
    }

    |
	kw='$or' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConditionalAccess().getOrKeyword_11()); 
    }

    |
	kw='$and' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConditionalAccess().getAndKeyword_12()); 
    }

    |
	kw='$size' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConditionalAccess().getSizeKeyword_13()); 
    }

    |
	kw='$type' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConditionalAccess().getTypeKeyword_14()); 
    }

    |
	kw='$near' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConditionalAccess().getNearKeyword_15()); 
    }

    |
	kw='$maxDistance' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConditionalAccess().getMaxDistanceKeyword_16()); 
    }
)
    ;





// Entry rule entryRuleBoolean
entryRuleBoolean returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanRule()); } 
	 iv_ruleBoolean=ruleBoolean 
	 { $current=$iv_ruleBoolean.current.getText(); }  
	 EOF 
;

// Rule Boolean
ruleBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanAccess().getTrueKeyword_0()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanAccess().getFalseKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleNull
entryRuleNull returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNullRule()); } 
	 iv_ruleNull=ruleNull 
	 { $current=$iv_ruleNull.current.getText(); }  
	 EOF 
;

// Rule Null
ruleNull returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='null' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNullAccess().getNullKeyword()); 
    }

    ;





// Entry rule entryRuleJsonDate
entryRuleJsonDate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJsonDateRule()); }
	 iv_ruleJsonDate=ruleJsonDate 
	 { $current=$iv_ruleJsonDate.current; } 
	 EOF 
;

// Rule JsonDate
ruleJsonDate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getJsonDateAccess().getDateNowParserRuleCall_0()); 
    }
    this_DateNow_0=ruleDateNow
    { 
        $current = $this_DateNow_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getJsonDateAccess().getDateMilliParserRuleCall_1()); 
    }
    this_DateMilli_1=ruleDateMilli
    { 
        $current = $this_DateMilli_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getJsonDateAccess().getDateStringParserRuleCall_2()); 
    }
    this_DateString_2=ruleDateString
    { 
        $current = $this_DateString_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getJsonDateAccess().getDateFullParserRuleCall_3()); 
    }
    this_DateFull_3=ruleDateFull
    { 
        $current = $this_DateFull_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDateNow
entryRuleDateNow returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDateNowRule()); }
	 iv_ruleDateNow=ruleDateNow 
	 { $current=$iv_ruleDateNow.current; } 
	 EOF 
;

// Rule DateNow
ruleDateNow returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDateNowAccess().getJsonDateAction_0(),
            $current);
    }
)	otherlv_1='new Date()' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDateNowAccess().getNewDateKeyword_1());
    }
)
;





// Entry rule entryRuleDateMilli
entryRuleDateMilli returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDateMilliRule()); }
	 iv_ruleDateMilli=ruleDateMilli 
	 { $current=$iv_ruleDateMilli.current; } 
	 EOF 
;

// Rule DateMilli
ruleDateMilli returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='new Date(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDateMilliAccess().getNewDateKeyword_0());
    }
(
(
		lv_milliseconds_1_0=RULE_INT
		{
			newLeafNode(lv_milliseconds_1_0, grammarAccess.getDateMilliAccess().getMillisecondsINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDateMilliRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"milliseconds",
        		lv_milliseconds_1_0, 
        		"INT");
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDateMilliAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleDateString
entryRuleDateString returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDateStringRule()); }
	 iv_ruleDateString=ruleDateString 
	 { $current=$iv_ruleDateString.current; } 
	 EOF 
;

// Rule DateString
ruleDateString returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='new Date(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDateStringAccess().getNewDateKeyword_0());
    }
(
(
		lv_dateString_1_0=RULE_STRING
		{
			newLeafNode(lv_dateString_1_0, grammarAccess.getDateStringAccess().getDateStringSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDateStringRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"dateString",
        		lv_dateString_1_0, 
        		"STRING");
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDateStringAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleDateFull
entryRuleDateFull returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDateFullRule()); }
	 iv_ruleDateFull=ruleDateFull 
	 { $current=$iv_ruleDateFull.current; } 
	 EOF 
;

// Rule DateFull
ruleDateFull returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='new Date(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDateFullAccess().getNewDateKeyword_0());
    }
(
(
		lv_year_1_0=RULE_INT
		{
			newLeafNode(lv_year_1_0, grammarAccess.getDateFullAccess().getYearINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDateFullRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"year",
        		lv_year_1_0, 
        		"INT");
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDateFullAccess().getCommaKeyword_2());
    }
(
(
		lv_month_3_0=RULE_INT
		{
			newLeafNode(lv_month_3_0, grammarAccess.getDateFullAccess().getMonthINTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDateFullRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"month",
        		lv_month_3_0, 
        		"INT");
	    }

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDateFullAccess().getCommaKeyword_4());
    }
(
(
		lv_day_5_0=RULE_INT
		{
			newLeafNode(lv_day_5_0, grammarAccess.getDateFullAccess().getDayINTTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDateFullRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"day",
        		lv_day_5_0, 
        		"INT");
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDateFullAccess().getCommaKeyword_6_0());
    }
(
(
		lv_hour_7_0=RULE_INT
		{
			newLeafNode(lv_hour_7_0, grammarAccess.getDateFullAccess().getHourINTTerminalRuleCall_6_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDateFullRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"hour",
        		lv_hour_7_0, 
        		"INT");
	    }

)
)	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getDateFullAccess().getCommaKeyword_6_2());
    }
(
(
		lv_minute_9_0=RULE_INT
		{
			newLeafNode(lv_minute_9_0, grammarAccess.getDateFullAccess().getMinuteINTTerminalRuleCall_6_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDateFullRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"minute",
        		lv_minute_9_0, 
        		"INT");
	    }

)
)	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getDateFullAccess().getCommaKeyword_6_4());
    }
(
(
		lv_second_11_0=RULE_INT
		{
			newLeafNode(lv_second_11_0, grammarAccess.getDateFullAccess().getSecondINTTerminalRuleCall_6_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDateFullRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"second",
        		lv_second_11_0, 
        		"INT");
	    }

)
)	otherlv_12=',' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getDateFullAccess().getCommaKeyword_6_6());
    }
(
(
		lv_millisecond_13_0=RULE_INT
		{
			newLeafNode(lv_millisecond_13_0, grammarAccess.getDateFullAccess().getMillisecondINTTerminalRuleCall_6_7_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDateFullRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"millisecond",
        		lv_millisecond_13_0, 
        		"INT");
	    }

)
))?	otherlv_14=')' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getDateFullAccess().getRightParenthesisKeyword_7());
    }
)
;





RULE_NUMBER : '-'? RULE_INT? '.' RULE_INT (('E'|'e') '-'? RULE_INT)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


